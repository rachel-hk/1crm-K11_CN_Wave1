{
	"name": "PRO_TRAN_ORDER_DETAILS_20230724",
	"properties": {
		"folder": {
			"name": "Pro"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vw_Latest_mall_order_goods_map",
						"type": "DatasetReference"
					},
					"name": "InestRawMallOrderGoodsMap"
				},
				{
					"dataset": {
						"referenceName": "vw_Latest_mall_goods",
						"type": "DatasetReference"
					},
					"name": "IngestMallGoods"
				},
				{
					"dataset": {
						"referenceName": "vw_Latest_so_item",
						"type": "DatasetReference"
					},
					"name": "IngestSoItem"
				},
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestCDMCUSTOMERMAPPING"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_PRO_TRAN_ORDER_DETAILS",
						"type": "DatasetReference"
					},
					"name": "SinkToProcessTable"
				}
			],
			"transformations": [
				{
					"name": "JoinForKGO"
				},
				{
					"name": "AddSourceType"
				},
				{
					"name": "DropUnwantColumn"
				},
				{
					"name": "RenameColumn"
				},
				{
					"name": "AddSourceTypeNewKGO"
				},
				{
					"name": "UnionKGOandNewKGO"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "JoinKGO"
				},
				{
					"name": "DropColumnOldKGO"
				},
				{
					"name": "JoinNewKGOMapping"
				},
				{
					"name": "DropMappingColumn"
				},
				{
					"name": "FilterOrderGoods"
				},
				{
					"name": "filterGoods"
				},
				{
					"name": "FilterSoItem"
				},
				{
					"name": "AddProductID"
				},
				{
					"name": "AddTime"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          id as long,",
				"          order_id as integer,",
				"          area_id as integer,",
				"          mer_id as integer,",
				"          store_code as string,",
				"          user_id as string,",
				"          member_id as string,",
				"          union_id as string,",
				"          order_no as string,",
				"          unique_id as string,",
				"          goods_id as long,",
				"          goods_map_id as integer,",
				"          goods_academy_id as integer,",
				"          goods_name as string,",
				"          goods_sn as string,",
				"          goods_icon_url as string,",
				"          goods_num as long,",
				"          goods_type as integer,",
				"          goods_amount as decimal(10,0),",
				"          origin_amount as decimal(10,0),",
				"          coupon_amount as string,",
				"          kpoint_amount as string,",
				"          kdp_amount as string,",
				"          prom_amount as decimal(10,0),",
				"          real_amount as decimal(10,0),",
				"          spec_key as string,",
				"          spec_key_name as string,",
				"          member_goods_price as string,",
				"          channel_id as integer,",
				"          pay_type as long,",
				"          is_comment as integer,",
				"          prom_type as integer,",
				"          prom_id as integer,",
				"          gift_id as long,",
				"          send_status as integer,",
				"          card_status as integer,",
				"          refund_id as integer,",
				"          delivery_id as integer,",
				"          profit_num as decimal(38,18),",
				"          sku as string,",
				"          is_gift as integer,",
				"          unvalid as integer,",
				"          is_member_price as integer,",
				"          invoice as integer,",
				"          cost_kpoint as integer,",
				"          cost_kpoint_type as integer,",
				"          cost_spoint as integer,",
				"          cost_kdp as integer,",
				"          create_at as long,",
				"          update_at as long,",
				"          deleted as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> InestRawMallOrderGoodsMap",
				"source(output(",
				"          id as long,",
				"          area_id as integer,",
				"          title as string,",
				"          goods_sn as string,",
				"          guide as string,",
				"          guide_weight as integer,",
				"          guide_color as string,",
				"          intro as string,",
				"          mer_id as integer,",
				"          store_code as string,",
				"          brand_id as string,",
				"          type as integer,",
				"          cash_type as integer,",
				"          member_cash_type as integer,",
				"          card_type as integer,",
				"          cate_id as integer,",
				"          effect_type as integer,",
				"          on_time as long,",
				"          off_time as long,",
				"          buy_limit_type as integer,",
				"          buy_limit as long,",
				"          is_shipping as integer,",
				"          shipping_express as integer,",
				"          shipping_store as integer,",
				"          return_time as integer,",
				"          services as string,",
				"          is_on_sale as integer,",
				"          whole_is_on_sale as integer,",
				"          is_recommend as integer,",
				"          wx_share as integer,",
				"          sort_by as integer,",
				"          min_price as decimal(38,18),",
				"          max_price as decimal(38,18),",
				"          quantity as integer,",
				"          total_quantity as integer,",
				"          purchase as integer,",
				"          spec_num as integer,",
				"          sales as integer,",
				"          pviews as integer,",
				"          tag_kp_cash as integer,",
				"          tag_kp_multiple as integer,",
				"          is_cart as integer,",
				"          is_special as integer,",
				"          is_profitsharing as integer,",
				"          invoice as integer,",
				"          is_search as integer,",
				"          unique_id as string,",
				"          create_at as long,",
				"          update_at as long,",
				"          create_by as string,",
				"          update_by as string,",
				"          deleted as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestMallGoods",
				"source(output(",
				"          id as long,",
				"          order_code as string,",
				"          user_id as string,",
				"          merchant_id as long,",
				"          product_id as long,",
				"          mp_id as long,",
				"          store_mp_id as long,",
				"          item_status as integer,",
				"          warehouse_type as integer,",
				"          store_id as string,",
				"          contract_code as string,",
				"          settle_method as integer,",
				"          settle_status as integer,",
				"          settle_num as decimal(38,18),",
				"          product_item_amount as decimal(38,18),",
				"          product_item_num as decimal(38,18),",
				"          product_cname as string,",
				"          product_pic_path as string,",
				"          product_sale_type as integer,",
				"          product_price_original as decimal(38,18),",
				"          product_price_market as decimal(38,18),",
				"          product_price_sale as decimal(38,18),",
				"          product_price_point as integer,",
				"          product_tax_amount as decimal(38,18),",
				"          purchase_price as decimal(38,18),",
				"          buy_type as integer,",
				"          frozen_virtal_stock_num as decimal(38,18),",
				"          product_gross_weight as decimal(38,18),",
				"          parent_order_code as string,",
				"          product_item_before_amount as decimal(38,18),",
				"          code as string,",
				"          third_merchant_product_code as string,",
				"          unit as string,",
				"          sale_unit as string,",
				"          place_of_origin as string,",
				"          ext_info as string,",
				"          standard as string,",
				"          material as string,",
				"          product_price_before_final as decimal(38,18),",
				"          comment_status as integer,",
				"          series_parent_id as long,",
				"          brand_id as string,",
				"          brand_name as string,",
				"          category_id as long,",
				"          category_name as string,",
				"          whole_category_id as string,",
				"          whole_category_name as string,",
				"          relation_mp_id as long,",
				"          type as integer,",
				"          bar_code as string,",
				"          art_no as string,",
				"          un_do_num as decimal(38,18),",
				"          un_delivery_num as decimal(38,18),",
				"          delivery_num as decimal(38,18),",
				"          line_num as integer,",
				"          virtal_warehouse_id as long,",
				"          product_price_final as decimal(38,18),",
				"          setmeal_code as string,",
				"          waiter_code as string,",
				"          setmeal_name as string,",
				"          support_invoice as integer,",
				"          setmeal_num as integer,",
				"          tax_rate as decimal(38,18),",
				"          tax_group_code as string,",
				"          remark as string,",
				"          gift_card_code as string,",
				"          live_id as long,",
				"          send_coupon as string,",
				"          ext_field1 as string,",
				"          ext_field2 as string,",
				"          ext_field3 as string,",
				"          ext_field4 as string,",
				"          ext_field5 as string,",
				"          is_available as integer,",
				"          is_deleted as integer,",
				"          version_no as integer,",
				"          create_userid as long,",
				"          create_username as string,",
				"          create_time as timestamp,",
				"          create_time_db as timestamp,",
				"          server_ip as string,",
				"          update_userid as long,",
				"          update_username as string,",
				"          update_time as timestamp,",
				"          update_time_db as timestamp,",
				"          company_id as long,",
				"          out_order_code as string,",
				"          is_inner_supplier as integer,",
				"          supplier_name as string,",
				"          supplier_id as long,",
				"          is_drop_shipping as integer,",
				"          supplier_code as string,",
				"          packaging_fee as decimal(38,18),",
				"          auto_refund as integer,",
				"          expiry_time as timestamp,",
				"          series_product_code as string,",
				"          service_date_time as binary,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestSoItem",
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestCDMCUSTOMERMAPPING",
				"FilterOrderGoods, filterGoods join(goods_id == IngestMallGoods@id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinForKGO",
				"JoinForKGO derive(Source_Type = \"KGO\",",
				"          create_at = toTimestamp((toInteger(toString(InestRawMallOrderGoodsMap@create_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          update_at = toTimestamp((toInteger(toString(InestRawMallOrderGoodsMap@update_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss')) ~> AddSourceType",
				"AddTime select(mapColumn(",
				"          Order_SID = InestRawMallOrderGoodsMap@id,",
				"          Order_Code = order_no,",
				"          User_ID = user_id,",
				"          Merchant_ID = InestRawMallOrderGoodsMap@mer_id,",
				"          Product_ID = goods_id,",
				"          Item_Status = send_status,",
				"          Store_ID = IngestMallGoods@store_code,",
				"          Product_Pur_No = goods_num,",
				"          Product_Price_Original = origin_amount,",
				"          Product_Price_Market = goods_amount,",
				"          Product_Price_Sale = prom_amount,",
				"          Buy_Type = prom_type,",
				"          Brand_ID = brand_id,",
				"          Product_Price_Final = real_amount,",
				"          Refund_ID = refund_id,",
				"          Product_Name_CN = title,",
				"          Source_Type,",
				"          order_Insert_Date = InestRawMallOrderGoodsMap@Insert_Date,",
				"          goods_Insert_Date = IngestMallGoods@Insert_Date,",
				"          create_time = create_at,",
				"          update_time = update_at,",
				"          Create_Time_DB,",
				"          Update_Time_DB,",
				"          member_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantColumn",
				"FilterSoItem select(mapColumn(",
				"          Order_SID = id,",
				"          Order_Code = order_code,",
				"          User_ID = user_id,",
				"          Merchant_ID = merchant_id,",
				"          Product_ID = product_id,",
				"          Mp_ID = mp_id,",
				"          store_mp_id,",
				"          Item_Status = item_status,",
				"          warehouse_type,",
				"          Store_ID = store_id,",
				"          contract_code,",
				"          settle_method,",
				"          settle_status,",
				"          settle_num,",
				"          product_item_amount,",
				"          Product_Pur_No = product_item_num,",
				"          Product_Name_CN = product_cname,",
				"          product_pic_path,",
				"          product_sale_type,",
				"          Product_Price_Original = product_price_original,",
				"          Product_Price_Market = product_price_market,",
				"          Product_Price_Sale = product_price_sale,",
				"          product_price_point,",
				"          product_tax_amount,",
				"          purchase_price,",
				"          Buy_Type = buy_type,",
				"          frozen_virtal_stock_num,",
				"          product_gross_weight,",
				"          parent_order_code,",
				"          product_item_before_amount,",
				"          code,",
				"          third_merchant_product_code,",
				"          unit,",
				"          sale_unit,",
				"          place_of_origin,",
				"          ext_info,",
				"          standard,",
				"          material,",
				"          product_price_before_final,",
				"          comment_status,",
				"          series_parent_id,",
				"          Brand_ID = brand_id,",
				"          brand_name,",
				"          category_id,",
				"          category_name,",
				"          whole_category_id,",
				"          whole_category_name,",
				"          relation_mp_id,",
				"          type,",
				"          bar_code,",
				"          art_no,",
				"          un_do_num,",
				"          un_delivery_num,",
				"          delivery_num,",
				"          line_num,",
				"          virtal_warehouse_id,",
				"          Product_Price_Final = product_price_final,",
				"          setmeal_code,",
				"          waiter_code,",
				"          setmeal_name,",
				"          support_invoice,",
				"          setmeal_num,",
				"          tax_rate,",
				"          tax_group_code,",
				"          remark,",
				"          gift_card_code,",
				"          live_id,",
				"          send_coupon,",
				"          ext_field1,",
				"          ext_field2,",
				"          ext_field3,",
				"          ext_field4,",
				"          ext_field5,",
				"          is_available,",
				"          is_deleted,",
				"          version_no,",
				"          create_userid,",
				"          create_username,",
				"          create_time,",
				"          create_time_db,",
				"          server_ip,",
				"          update_userid,",
				"          update_username,",
				"          update_time,",
				"          update_time_db,",
				"          company_id,",
				"          out_order_code,",
				"          is_inner_supplier,",
				"          supplier_name,",
				"          supplier_id,",
				"          is_drop_shipping,",
				"          supplier_code,",
				"          packaging_fee,",
				"          auto_refund,",
				"          expiry_time,",
				"          series_product_code,",
				"          service_date_time,",
				"          item_Insert_Date = Insert_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumn",
				"RenameColumn derive(Source_Type = 'New KGO') ~> AddSourceTypeNewKGO",
				"DropColumnOldKGO, DropMappingColumn union(byName: true)~> UnionKGOandNewKGO",
				"UnionKGOandNewKGO derive(Start_Date = toDate($Start_Date, 'yyyyMMdd'),",
				"          End_Date = toDate(toString(null())),",
				"          Is_Current = 1,",
				"          BU_Source = 'K11 PRC',",
				"          Product_Name_CN = replace(Product_Name_CN,'|','')) ~> AddColumn",
				"DropUnwantColumn, IngestCDMCUSTOMERMAPPING join(member_id == K11PRC_Member_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinKGO",
				"JoinKGO select(mapColumn(",
				"          Order_SID,",
				"          Order_Code,",
				"          User_ID,",
				"          Merchant_ID,",
				"          Product_ID,",
				"          Item_Status,",
				"          Store_ID,",
				"          Product_Pur_No,",
				"          Product_Price_Original,",
				"          Product_Price_Market,",
				"          Product_Price_Sale,",
				"          Buy_Type,",
				"          Brand_ID,",
				"          Product_Price_Final,",
				"          Refund_ID,",
				"          Product_Name_CN,",
				"          Source_Type,",
				"          Customer_UID,",
				"          order_Insert_Date,",
				"          goods_Insert_Date,",
				"          create_time,",
				"          update_time,",
				"          Create_Time_DB,",
				"          Update_Time_DB",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropColumnOldKGO",
				"AddSourceTypeNewKGO, IngestCDMCUSTOMERMAPPING join(User_ID == New_KGO_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinNewKGOMapping",
				"AddProductID select(mapColumn(",
				"          Order_SID,",
				"          Order_Code,",
				"          User_ID,",
				"          Merchant_ID,",
				"          Product_ID,",
				"          Mp_ID,",
				"          store_mp_id,",
				"          Item_Status,",
				"          warehouse_type,",
				"          Store_ID,",
				"          contract_code,",
				"          settle_method,",
				"          settle_status,",
				"          settle_num,",
				"          product_item_amount,",
				"          Product_Pur_No,",
				"          Product_Name_CN,",
				"          product_pic_path,",
				"          product_sale_type,",
				"          Product_Price_Original,",
				"          Product_Price_Market,",
				"          Product_Price_Sale,",
				"          product_price_point,",
				"          product_tax_amount,",
				"          purchase_price,",
				"          Buy_Type,",
				"          frozen_virtal_stock_num,",
				"          product_gross_weight,",
				"          parent_order_code,",
				"          product_item_before_amount,",
				"          code,",
				"          third_merchant_product_code,",
				"          unit,",
				"          sale_unit,",
				"          place_of_origin,",
				"          ext_info,",
				"          standard,",
				"          material,",
				"          product_price_before_final,",
				"          comment_status,",
				"          series_parent_id,",
				"          Brand_ID,",
				"          brand_name,",
				"          category_id,",
				"          category_name,",
				"          whole_category_id,",
				"          whole_category_name,",
				"          relation_mp_id,",
				"          type,",
				"          bar_code,",
				"          art_no,",
				"          un_do_num,",
				"          un_delivery_num,",
				"          delivery_num,",
				"          line_num,",
				"          virtal_warehouse_id,",
				"          Product_Price_Final,",
				"          setmeal_code,",
				"          waiter_code,",
				"          setmeal_name,",
				"          support_invoice,",
				"          setmeal_num,",
				"          tax_rate,",
				"          tax_group_code,",
				"          remark,",
				"          gift_card_code,",
				"          live_id,",
				"          send_coupon,",
				"          ext_field1,",
				"          ext_field2,",
				"          ext_field3,",
				"          ext_field4,",
				"          ext_field5,",
				"          is_available,",
				"          is_deleted,",
				"          version_no,",
				"          create_userid,",
				"          create_username,",
				"          create_time,",
				"          Create_Time_DB = create_time_db,",
				"          server_ip,",
				"          update_userid,",
				"          update_username,",
				"          update_time,",
				"          Update_Time_DB = update_time_db,",
				"          company_id,",
				"          out_order_code,",
				"          is_inner_supplier,",
				"          supplier_name,",
				"          supplier_id,",
				"          is_drop_shipping,",
				"          supplier_code,",
				"          packaging_fee,",
				"          auto_refund,",
				"          expiry_time,",
				"          series_product_code,",
				"          service_date_time,",
				"          item_Insert_Date,",
				"          Source_Type,",
				"          Customer_UID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropMappingColumn",
				"InestRawMallOrderGoodsMap filter(toDate(Insert_Date)==addDays(currentDate(),-1)) ~> FilterOrderGoods",
				"IngestMallGoods filter(toDate(Insert_Date)==addDays(currentDate(),-1)) ~> filterGoods",
				"IngestSoItem filter(toDate(Insert_Date)==addDays(currentDate(),-1)) ~> FilterSoItem",
				"JoinNewKGOMapping derive(Product_ID = store_mp_id) ~> AddProductID",
				"AddSourceType derive(Create_Time_DB = create_at,",
				"          Update_Time_DB = update_at) ~> AddTime",
				"AddColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Order_SID,",
				"          Order_Code,",
				"          Customer_UID,",
				"          Source_Type,",
				"          BU_Source,",
				"          User_ID,",
				"          Merchant_ID,",
				"          Product_ID,",
				"          Mp_ID,",
				"          Store_Mp_ID = store_mp_id,",
				"          Item_Status,",
				"          Warehouse_Type = warehouse_type,",
				"          Store_ID,",
				"          Settle_Method = settle_method,",
				"          Settle_Status = settle_status,",
				"          Settle_No = settle_num,",
				"          Product_Item_Amount = product_item_amount,",
				"          Product_Pur_No,",
				"          Product_Name_CN,",
				"          Product_Sale_Type = product_sale_type,",
				"          Product_Price_Original,",
				"          Product_Price_Market,",
				"          Product_Price_Sale,",
				"          Product_Price_Point = product_price_point,",
				"          Pur_Price = purchase_price,",
				"          Buy_Type,",
				"          Product_Gross_Weight = product_gross_weight,",
				"          Parent_Order_Code = parent_order_code,",
				"          Product_Item_Before_Amount = product_item_before_amount,",
				"          Product_Code = code,",
				"          Third_Merchant_Product_Code = third_merchant_product_code,",
				"          Product_Unit = unit,",
				"          Sale_Unit = sale_unit,",
				"          Place_Origin = place_of_origin,",
				"          Ext_Info = ext_info,",
				"          Product_Standard = standard,",
				"          Product_Material = material,",
				"          Product_Price_Before_Final = product_price_before_final,",
				"          Comment_Status = comment_status,",
				"          Series_Parent_ID = series_parent_id,",
				"          Brand_ID,",
				"          Brand_Name = brand_name,",
				"          Cate_ID = category_id,",
				"          Cate_Name = category_name,",
				"          Whole_Cate_ID = whole_category_id,",
				"          Whole_Cate_Name = whole_category_name,",
				"          Relation_Mp_ID = relation_mp_id,",
				"          Product_Type = type,",
				"          Art_No = art_no,",
				"          Delivery_No = delivery_num,",
				"          Product_Price_Final,",
				"          Setmeal_Code = setmeal_code,",
				"          Waiter_Code = waiter_code,",
				"          Setmeal_Name = setmeal_name,",
				"          Support_Invoice = support_invoice,",
				"          Setmeal_No = setmeal_num,",
				"          Product_Remark = remark,",
				"          Gift_Card_Code = gift_card_code,",
				"          Live_ID = live_id,",
				"          Send_Coupon = send_coupon,",
				"          Is_Available = is_available,",
				"          Is_Deleted = is_deleted,",
				"          Version_No = version_no,",
				"          Create_Time = create_time,",
				"          Create_Time_DB,",
				"          Update_Time = update_time,",
				"          Update_Time_DB,",
				"          Company_ID = company_id,",
				"          Out_Order_Code = out_order_code,",
				"          Is_Inner_Supplier = is_inner_supplier,",
				"          Supplier_Name = supplier_name,",
				"          Supplier_ID = supplier_id,",
				"          Is_Drop_Shipping = is_drop_shipping,",
				"          Supplier_Code = supplier_code,",
				"          Package_Fee = packaging_fee,",
				"          Auto_Refund = auto_refund,",
				"          Refund_ID,",
				"          Expiry_Time = expiry_time,",
				"          Series_Product_Code = series_product_code,",
				"          Service_Date_Time = service_date_time,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current",
				"     )) ~> SinkToProcessTable"
			]
		}
	}
}