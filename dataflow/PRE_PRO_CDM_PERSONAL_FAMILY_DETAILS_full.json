{
	"name": "PRE_PRO_CDM_PERSONAL_FAMILY_DETAILS_full",
	"properties": {
		"folder": {
			"name": "Pro"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vw_latest_com_member_extend",
						"type": "DatasetReference"
					},
					"name": "IngestComMemberExtend"
				},
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestCDMCUSTOMERMAPPING"
				},
				{
					"dataset": {
						"referenceName": "vw_latest_com_member",
						"type": "DatasetReference"
					},
					"name": "IngestComMember"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_PRE_PRO_CDM_PERSONAL_FAMILY_DETAILS",
						"type": "DatasetReference"
					},
					"name": "SinktoProcessTable"
				}
			],
			"transformations": [
				{
					"name": "JoinCDMCUSTOMERMAPPING"
				},
				{
					"name": "DropUnwantedColumn"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "Dedup"
				},
				{
					"name": "JoinMemberFullProfile"
				},
				{
					"name": "FilterActiveMember"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          id as long,",
				"          member_id as string,",
				"          kids as integer,",
				"          kids_age as integer,",
				"          fav_prod as string,",
				"          hobby as string,",
				"          fav_item as string,",
				"          month_income as integer,",
				"          year_income as integer,",
				"          kid1_sex as integer,",
				"          kid1_birthday as integer,",
				"          kid2_sex as integer,",
				"          kid2_birthday as integer,",
				"          from_know as string,",
				"          addr2 as string,",
				"          addr3 as string,",
				"          phone2 as string,",
				"          qq as string,",
				"          weibo as string,",
				"          alipay as string,",
				"          company as string,",
				"          industry as string,",
				"          job as string,",
				"          remark as string,",
				"          bank_number as string,",
				"          bank_name as string,",
				"          is_mail_market as integer,",
				"          company_size as integer,",
				"          is_k11 as integer,",
				"          customer_leader as string,",
				"          update_at as integer,",
				"          deleted as integer,",
				"          xf_vipid as string,",
				"          xf_issuetillid as string,",
				"          xf_groupid16 as string,",
				"          xf_groupid18 as string,",
				"          xf_lastmodby as string,",
				"          xf_lastmodtime as long,",
				"          xf_issuetime as long,",
				"          xf_newaccumpur as long,",
				"          xf_newttlpurcount as integer,",
				"          xf_ismainvip as integer,",
				"          xf_vipcardtype as integer,",
				"          xf_club as string,",
				"          xf_joinclubdate as long,",
				"          xf_infosource as string,",
				"          xf_applicationid as string,",
				"          xf_applicationdate as long,",
				"          xf_certificatetype as string,",
				"          xf_passwordflag as string,",
				"          xf_zone as string,",
				"          xf_region as string,",
				"          xf_educationcode as string,",
				"          xf_smscontact as integer,",
				"          xf_emailcontact as integer,",
				"          xf_phonecontact as integer,",
				"          xf_postcontact as integer,",
				"          xf_lastupdowndate as long,",
				"          xf_lastexpirydate as long,",
				"          xf_language as integer,",
				"          xf_tochinatimes as string,",
				"          xf_tochinareason as string,",
				"          xf_nameoncard as string,",
				"          xf_title as string,",
				"          xf_monthlyincome as string,",
				"          xf_companyname as string,",
				"          xf_businesstitle as string,",
				"          xf_occupation as string,",
				"          xf_visitk11reason as string,",
				"          xf_allowsendpromomsg as string,",
				"          xf_catofpromomsg as string,",
				"          xf_allowsharemyinfo as string,",
				"          xf_compofsharemyinfo as string,",
				"          xf_agegroup as string,",
				"          xf_references as string,",
				"          xf_childagegroup as string,",
				"          xf_terminalip as string,",
				"          xf_requested as string,",
				"          xf_likeproductother as string,",
				"          xf_interestother as string,",
				"          xf_tradesources as string,",
				"          xf_shownameoncardtype as integer,",
				"          xf_currentrewardbonus_cs as integer,",
				"          active as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          join_show as string,",
				"          avg_expense as integer,",
				"          trip_mode as string,",
				"          fz_bonus_expire_at as decimal(38,18),",
				"          fz_expire_at as decimal(38,18),",
				"          xf_populationattribute as string,",
				"          xf_memberstatus as integer,",
				"          person as string,",
				"          requested_source as string,",
				"          employeeno as string,",
				"          activityname as string,",
				"          xf_storecode as string,",
				"          xf_employeeno as string,",
				"          xf_requested_relationship as string,",
				"          xf_references_phone as string,",
				"          push_classification as string,",
				"          xf_remark as string,",
				"          xf_special_remark as string,",
				"          xf_sales_ticket as string,",
				"          xf_head_img as string,",
				"          xf_vipaccountno as string,",
				"          xf_kpoint_total as integer,",
				"          xf_personal_needs as string,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestComMemberExtend",
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestCDMCUSTOMERMAPPING",
				"source(output(",
				"          id as long,",
				"          member_id as string,",
				"          area_id as integer,",
				"          real_name as string,",
				"          nick_name as string,",
				"          en_name as string,",
				"          phone as string,",
				"          phone_code as string,",
				"          tel as string,",
				"          head_img as string,",
				"          level_id as integer,",
				"          is_special_level as integer,",
				"          vip_code as string,",
				"          vip_pass as string,",
				"          union_id as string,",
				"          is_marry as integer,",
				"          reg_at as long,",
				"          expire_at as long,",
				"          first_pay as long,",
				"          last_pay as long,",
				"          cycle_at as decimal(38,18),",
				"          issue_at as long,",
				"          status as integer,",
				"          zone as string,",
				"          city as string,",
				"          province as string,",
				"          country as string,",
				"          addr as string,",
				"          zip as string,",
				"          sex as integer,",
				"          birthday as long,",
				"          birthday_short as integer,",
				"          age as integer,",
				"          email as string,",
				"          wechat_id as string,",
				"          reg_origin as integer,",
				"          reg_sub_origin as integer,",
				"          up_origin as integer,",
				"          up_at as integer,",
				"          operator_type as integer,",
				"          operator_id as integer,",
				"          operator_name as string,",
				"          kpoint as integer,",
				"          expire_kp as integer,",
				"          clear_kp as integer,",
				"          spoint as integer,",
				"          expire_sp as integer,",
				"          clear_sp as integer,",
				"          sp_times as integer,",
				"          balance as integer,",
				"          sales_total as decimal(38,18),",
				"          sales_times as integer,",
				"          eform_status as integer,",
				"          create_at as long,",
				"          update_at as long,",
				"          deleted as integer,",
				"          update_operator as string,",
				"          upgrade_type as integer,",
				"          is_hk_member as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestComMember",
				"JoinMemberFullProfile, IngestCDMCUSTOMERMAPPING join(IngestComMember@member_id == K11PRC_Member_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCDMCUSTOMERMAPPING",
				"JoinCDMCUSTOMERMAPPING select(mapColumn(",
				"          member_id = Hashed_Member_ID,",
				"          kids,",
				"          kid1_sex,",
				"          kid1_birthday,",
				"          kid2_sex,",
				"          kid2_birthday,",
				"          Customer_UID,",
				"          update_at = IngestComMemberExtend@update_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantedColumn",
				"Dedup derive(Start_Date = toDate($Start_Date, 'yyyyMMdd'),",
				"          BU_Source = 'K11 PRC',",
				"          Kid1_Birthday = case(kid1_birthday == 0, toTimestamp(null()),toTimestamp((toInteger(toString(kid1_birthday))+28800)*1000l,'yyyy-MM-dd HH:mm:ss')),",
				"          Kid2_Birthday = case(kid2_birthday == 0,toTimestamp(null()),toTimestamp((toInteger(toString(kid2_birthday))+28800)*1000l,'yyyy-MM-dd HH:mm:ss')),",
				"          Kid3_Gender = toInteger(null()),",
				"          Kid4_Gender = toInteger(null()),",
				"          Kid3_Birthday = toDate(null()),",
				"          Kid4_Birthday = toDate(null()),",
				"          Update_At = toTimestamp((toInteger(toString(update_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          End_Date = toDate(null()),",
				"          Is_Current = 1) ~> AddColumn",
				"DropUnwantedColumn aggregate(groupBy(member_id,",
				"          kids,",
				"          kid1_sex,",
				"          kid1_birthday,",
				"          kid2_sex,",
				"          kid2_birthday,",
				"          Customer_UID,",
				"          update_at),",
				"     count = count()) ~> Dedup",
				"IngestComMemberExtend, FilterActiveMember join(IngestComMemberExtend@member_id == IngestComMember@member_id,",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMemberFullProfile",
				"IngestComMember filter(toString(deleted) =='0') ~> FilterActiveMember",
				"AddColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Member_ID = member_id,",
				"          With_Kid = kids,",
				"          Kid1_Gender = kid1_sex,",
				"          Kid2_Gender = kid2_sex,",
				"          Customer_UID,",
				"          Start_Date,",
				"          BU_Source,",
				"          Kid1_Birthday = AddColumn@Kid1_Birthday,",
				"          Kid2_Birthday = AddColumn@Kid2_Birthday,",
				"          Kid3_Gender,",
				"          Kid4_Gender,",
				"          Kid3_Birthday,",
				"          Kid4_Birthday,",
				"          End_Date,",
				"          Is_Current",
				"     )) ~> SinktoProcessTable"
			]
		}
	}
}