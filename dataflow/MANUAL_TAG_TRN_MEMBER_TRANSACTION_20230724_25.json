{
	"name": "MANUAL_TAG_TRN_MEMBER_TRANSACTION_20230724_25",
	"properties": {
		"folder": {
			"name": "Manual_Tag"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PUB_TRAN_ORDER",
						"type": "DatasetReference"
					},
					"name": "IngestTRANORDER"
				},
				{
					"dataset": {
						"referenceName": "PUB_REF_STORE",
						"type": "DatasetReference"
					},
					"name": "IngestRefStore"
				},
				{
					"dataset": {
						"referenceName": "PUB_TRAN_ORDER_DETAILS",
						"type": "DatasetReference"
					},
					"name": "IngestTranOrderDetails"
				},
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestionMapping"
				},
				{
					"dataset": {
						"referenceName": "PUB_TRAN_COUPON_RECORD",
						"type": "DatasetReference"
					},
					"name": "TRANCOUPONRECORD"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_MANUAL_TAG_TRN_MEMBER_TRANSACTION",
						"type": "DatasetReference"
					},
					"name": "SinkToTrnMemberTransaction"
				}
			],
			"transformations": [
				{
					"name": "SelectColumn"
				},
				{
					"name": "JoinRefStore"
				},
				{
					"name": "JoinDetails"
				},
				{
					"name": "JoinMapping"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "Sum"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "OrderAtAdd8"
				},
				{
					"name": "FilterLatest"
				},
				{
					"name": "DropUnwantColumn"
				},
				{
					"name": "FilterNotNull"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Order_SID as integer,",
				"          Order_Code as string,",
				"          Customer_UID as string,",
				"          Member_ID as string,",
				"          BU_Source as string,",
				"          Union_ID as string,",
				"          Tier_ID as integer,",
				"          Special_Tier_ID as integer,",
				"          Provider_Key as string,",
				"          Trans_Channel as integer,",
				"          Special_Level_Time as timestamp,",
				"          Order_Channel as string,",
				"          Area_ID as integer,",
				"          Origin_Order_Code as string,",
				"          Origin_Parent_Order_Code as string,",
				"          Wechat_Pay_Code as string,",
				"          Store_Code as string,",
				"          Store_Name as string,",
				"          Origin_Amount as decimal(30,4),",
				"          Not_Discount_Amount as decimal(30,4),",
				"          Sales_Amount as decimal(30,4),",
				"          Real_Amount as decimal(30,4),",
				"          Kpoint_Amount as decimal(30,4),",
				"          GV_Amount as decimal(30,4),",
				"          Bonus_Point as integer,",
				"          Bonus_Type as string,",
				"          Order_At as timestamp,",
				"          Order_Source as integer,",
				"          Order_Status as integer,",
				"          Cancel_At as timestamp,",
				"          Order_Remark as string,",
				"          Return_Amount as decimal(30,4),",
				"          Return_Bonus_Point as integer,",
				"          Central_Store_Code as string,",
				"          Online_Type as string,",
				"          KPos_Input as integer,",
				"          Order_Prom_Discount as decimal(30,4),",
				"          Order_Delivery_Fee as decimal(30,4),",
				"          Pay_Type as string,",
				"          Used_Kpoint as integer,",
				"          Prom_ID as integer,",
				"          Prom_Name as string,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Create_At as timestamp,",
				"          Update_At as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestTRANORDER",
				"source(output(",
				"          Store_ID as integer,",
				"          Store_Code as string,",
				"          Store_BU as string,",
				"          SB_code as string,",
				"          SB_name as string,",
				"          Store_Name as string,",
				"          Store_Intro as string,",
				"          Mall_Code as string,",
				"          Store_Status as integer,",
				"          Store_Floor as string,",
				"          Store_Unitcode as string,",
				"          Store_Classify as string,",
				"          SB1_Code as string,",
				"          SB1_Name as string,",
				"          SB2_Code as string,",
				"          SB2_Name as string,",
				"          Store_Cate as string,",
				"          Is_Channel_No as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestRefStore",
				"source(output(",
				"          Order_SID as long,",
				"          Order_Code as string,",
				"          Customer_UID as string,",
				"          Source_Type as string,",
				"          BU_Source as string,",
				"          User_ID as long,",
				"          Merchant_ID as long,",
				"          Product_ID as long,",
				"          Mp_ID as long,",
				"          Store_Mp_ID as long,",
				"          Item_Status as string,",
				"          Warehouse_Type as integer,",
				"          Store_ID as string,",
				"          Settle_Method as integer,",
				"          Settle_Status as integer,",
				"          Settle_No as decimal(18,0),",
				"          Product_Item_Amount as decimal(18,0),",
				"          Product_Pur_No as decimal(18,0),",
				"          Product_Name_CN as string,",
				"          Product_Sale_Type as integer,",
				"          Product_Price_Original as decimal(18,0),",
				"          Product_Price_Market as decimal(18,0),",
				"          Product_Price_Sale as decimal(18,0),",
				"          Product_Price_Point as integer,",
				"          Pur_Price as decimal(18,0),",
				"          Buy_Type as integer,",
				"          Product_Gross_Weight as decimal(18,0),",
				"          Parent_Order_Code as string,",
				"          Product_Item_Before_Amount as decimal(18,0),",
				"          Product_Code as string,",
				"          Third_Merchant_Product_Code as string,",
				"          Product_Unit as string,",
				"          Sale_Unit as string,",
				"          Place_Origin as string,",
				"          Ext_Info as string,",
				"          Product_Standard as string,",
				"          Product_Material as string,",
				"          Product_Price_Before_Final as decimal(18,0),",
				"          Comment_Status as integer,",
				"          Series_Parent_ID as long,",
				"          Brand_ID as long,",
				"          Brand_Name as string,",
				"          Cate_ID as long,",
				"          Cate_Name as string,",
				"          Whole_Cate_ID as string,",
				"          Whole_Cate_Name as string,",
				"          Relation_Mp_ID as long,",
				"          Product_Type as integer,",
				"          Art_No as string,",
				"          Delivery_No as decimal(18,0),",
				"          Product_Price_Final as decimal(18,0),",
				"          Setmeal_Code as string,",
				"          Waiter_Code as string,",
				"          Setmeal_Name as string,",
				"          Support_Invoice as integer,",
				"          Setmeal_No as integer,",
				"          Product_Remark as string,",
				"          Gift_Card_Code as string,",
				"          Live_ID as long,",
				"          Send_Coupon as string,",
				"          Is_Available as integer,",
				"          Is_Deleted as integer,",
				"          Version_No as integer,",
				"          Create_Time as timestamp,",
				"          Create_Time_DB as timestamp,",
				"          Update_Time as timestamp,",
				"          Update_Time_DB as timestamp,",
				"          Company_ID as long,",
				"          Out_Order_Code as string,",
				"          Is_Inner_Supplier as integer,",
				"          Supplier_Name as string,",
				"          Supplier_ID as long,",
				"          Is_Drop_Shipping as integer,",
				"          Supplier_Code as string,",
				"          Package_Fee as decimal(18,0),",
				"          Auto_Refund as integer,",
				"          Refund_ID as integer,",
				"          Expiry_Time as timestamp,",
				"          Series_Product_Code as string,",
				"          Service_Date_Time as string,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestTranOrderDetails",
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestionMapping",
				"source(output(",
				"          Coupon_UID as string,",
				"          Coupon_Code as string,",
				"          Customer_UID as string,",
				"          Coupon_ID as string,",
				"          BU_Source as string,",
				"          Account_ID as integer,",
				"          App_ID as string,",
				"          Coupon_Type as string,",
				"          Acquire_ID as integer,",
				"          Acquaire_Name as string,",
				"          Consume_Name as string,",
				"          Open_ID as string,",
				"          Union_ID as string,",
				"          Customer_ID as string,",
				"          Tier_ID as integer,",
				"          Is_Give as integer,",
				"          Give_Code as string,",
				"          Give_Open_ID as string,",
				"          Consume_Source as string,",
				"          Staff_Open_ID as string,",
				"          Delete_At as timestamp,",
				"          Consume_At as timestamp,",
				"          Consume_Amount as decimal(18,0),",
				"          Consume_Store_Code as string,",
				"          Consume_App_ID as long,",
				"          Consume_Tier_ID as integer,",
				"          Consume_Origin_Order_Code as string,",
				"          Give_At as timestamp,",
				"          Location_Name as string,",
				"          Coupon_Status as integer,",
				"          Start_At as timestamp,",
				"          End_At as timestamp,",
				"          Create_At as timestamp,",
				"          Update_At as timestamp,",
				"          Is_Deleted as integer,",
				"          Exchange_No as string,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> TRANCOUPONRECORD",
				"AddColumn select(mapColumn(",
				"          id = Order_SID,",
				"          store_id = Store_ID,",
				"          purchase_date = Order_At_8,",
				"          transaction_date,",
				"          invoice_no = IngestTRANORDER@Order_Code,",
				"          total_amount = Sales_Amount,",
				"          total_quantity,",
				"          total_discount,",
				"          transaction_type_id = Order_Status,",
				"          member_id = manual_tag_id,",
				"          channel_id,",
				"          active_flag,",
				"          create_by,",
				"          create_date,",
				"          tenant_id,",
				"          transaction_type_code,",
				"          transaction_time_utc,",
				"          transaction_time_local,",
				"          transaction_time_str,",
				"          process_time_utc,",
				"          process_time_local,",
				"          process_time_str,",
				"          purchase_time_utc,",
				"          purchase_time_local,",
				"          purchase_time_str,",
				"          discount_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumn",
				"FilterLatest, IngestRefStore join(IngestTRANORDER@Store_Code == IngestRefStore@Store_Code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinRefStore",
				"JoinRefStore, Sum join(Origin_Order_Code == Sum@Order_Code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinDetails",
				"JoinDetails, IngestionMapping join(IngestTRANORDER@Customer_UID == IngestionMapping@Customer_UID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 50,",
				"          Order_SID",
				"     ),",
				"     broadcast: 'auto')~> JoinMapping",
				"OrderAtAdd8 derive(channel_id = case(toString(byName('Order_Channel'))=='Offline Transaction',2,1),",
				"          active_flag = 1,",
				"          create_by = 1,",
				"          tenant_id = 1,",
				"          create_date = currentUTC(),",
				"          transaction_date = Order_At,",
				"          total_discount = Sales_Amount-Real_Amount,",
				"          transaction_time_utc = toTimestamp(concat(toString(byName('Order_At'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),' +08:00'), 'yyyy-MM-dd\\'T\\'HH:mm:ss')-hours(8),",
				"          transaction_time_local = toTimestamp(byName('Order_At')),",
				"          transaction_time_str = concat(toString(byName('Order_At'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),'+08:00'),",
				"          process_time_utc = toTimestamp(concat(toString(byName('Order_At'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),' +08:00'), 'yyyy-MM-dd\\'T\\'HH:mm:ss')-hours(8),",
				"          process_time_local = toTimestamp(byName('Order_At')),",
				"          process_time_str = concat(toString(byName('Order_At'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),'+08:00'),",
				"          purchase_time_str = concat(toString(byName('Order_At'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),'+08:00'),",
				"          purchase_time_utc = toTimestamp(concat(toString(byName('Order_At'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),' +08:00'), 'yyyy-MM-dd\\'T\\'HH:mm:ss')-hours(8),",
				"          purchase_time_local = toTimestamp(byName('Order_At')),",
				"          discount_type = case(Kpoint_Amount!=0&&isNull(Consume_Origin_Order_Code)==false(),3, Kpoint_Amount!=0&&isNull(Consume_Origin_Order_Code)==true(),1,Kpoint_Amount==0&&isNull(Consume_Origin_Order_Code)==false(),2),",
				"          transaction_type_code = Order_Status) ~> AddColumn",
				"IngestTranOrderDetails aggregate(groupBy(Order_Code),",
				"     total_quantity = sum(Product_Pur_No)) ~> Sum",
				"JoinMapping, FilterNotNull join(Origin_Order_Code == Consume_Origin_Order_Code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"SelectColumn aggregate(groupBy(id,",
				"          store_id,",
				"          purchase_date,",
				"          transaction_date,",
				"          invoice_no,",
				"          total_amount,",
				"          total_quantity,",
				"          total_discount,",
				"          transaction_type_id,",
				"          member_id,",
				"          channel_id,",
				"          active_flag,",
				"          create_by,",
				"          create_date,",
				"          tenant_id,",
				"          transaction_type_code,",
				"          transaction_time_utc,",
				"          transaction_time_local,",
				"          transaction_time_str,",
				"          process_time_utc,",
				"          process_time_local,",
				"          process_time_str,",
				"          purchase_time_utc,",
				"          purchase_time_local,",
				"          purchase_time_str,",
				"          discount_type),",
				"     count = count()) ~> aggregate1",
				"join1 derive(Order_At_8 = Order_At+hours(8)) ~> OrderAtAdd8",
				"IngestTRANORDER filter(toDate(Start_Date) >= addDays(currentDate(),-2)) ~> FilterLatest",
				"TRANCOUPONRECORD select(mapColumn(",
				"          Coupon_UID,",
				"          Customer_UID,",
				"          Consume_Origin_Order_Code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantColumn",
				"DropUnwantColumn filter(isNull(Consume_Origin_Order_Code)==false()&&Consume_Origin_Order_Code!='') ~> FilterNotNull",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          id,",
				"          store_id,",
				"          purchase_date,",
				"          transaction_date,",
				"          invoice_no,",
				"          total_amount,",
				"          total_quantity,",
				"          total_discount,",
				"          transaction_type_id,",
				"          member_id,",
				"          channel_id,",
				"          active_flag,",
				"          create_by,",
				"          create_date,",
				"          tenant_id,",
				"          transaction_time_utc,",
				"          transaction_time_local,",
				"          transaction_time_str,",
				"          process_time_utc,",
				"          process_time_local,",
				"          process_time_str,",
				"          purchase_time_utc,",
				"          purchase_time_local,",
				"          purchase_time_str,",
				"          transaction_type_code,",
				"          discount_type",
				"     )) ~> SinkToTrnMemberTransaction"
			]
		}
	}
}