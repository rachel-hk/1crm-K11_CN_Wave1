{
	"name": "Pre_PRO_CDM_PERSONAL_PROFILE_EXTRA_copy1",
	"properties": {
		"folder": {
			"name": "Pro"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vw_latest_com_member",
						"type": "DatasetReference"
					},
					"name": "RawComMemberIngest"
				},
				{
					"dataset": {
						"referenceName": "vw_latest_com_member_extend",
						"type": "DatasetReference"
					},
					"name": "RawComMemberExtendIngest"
				},
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestCDMCUSTOMERMAPPING"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_PRE_CDM_PERSONAL_PROFILE_EXTRA",
						"type": "DatasetReference"
					},
					"name": "SinkPreCDMPERSONALPROFILEEXTRA",
					"rejectedDataLinkedService": {
						"referenceName": "1crmTagMgmtRawProd",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "JoinComMemberExtend"
				},
				{
					"name": "SelectRelatedColumnfromRaw",
					"description": "Renaming JoinComMemberExtend to SelectRelatedColumn with columns 'member_ID\n, area_ID\n, real_name\n, nick_name\n, en_name\n, xf_title\n, phone\n, phone_code\n,  tel\n, level_ID\n, is_special_level\n, union_id\n, is_marry\n, expire_at\n, cycle_at\n, issue_at\n, status\n, zone\n, city\n, province\n, country\n, addr\n, zip\n, sex\n, birthday,\nbirthday_short\n, fav_prod\n, hobby\n, fav_item\n, month_income\n, year_income\n, xf_monthyincome\n, addr2\n, addr3\n, phone2\n, email\n, qq\n, weibo\n, company\n, industry\n, job\n, is_mail_market\n, company_size\n, xf_educationcode\n, ref_origin\n, ref_sub_orgin\n,xf_language'"
				},
				{
					"name": "JoinComCDMCUSTOMERMAPPING"
				},
				{
					"name": "DropUnwantedColumn"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "SelectRelatedColumnfromTemp"
				},
				{
					"name": "Dedup"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          id as long,",
				"          member_id as string,",
				"          area_id as integer,",
				"          real_name as string,",
				"          nick_name as string,",
				"          en_name as string,",
				"          phone as string,",
				"          phone_code as string,",
				"          tel as string,",
				"          head_img as string,",
				"          level_id as integer,",
				"          is_special_level as integer,",
				"          vip_code as string,",
				"          vip_pass as string,",
				"          union_id as string,",
				"          is_marry as integer,",
				"          reg_at as long,",
				"          expire_at as long,",
				"          first_pay as long,",
				"          last_pay as long,",
				"          cycle_at as decimal(38,18),",
				"          issue_at as long,",
				"          status as integer,",
				"          zone as string,",
				"          city as string,",
				"          province as string,",
				"          country as string,",
				"          addr as string,",
				"          zip as string,",
				"          sex as integer,",
				"          birthday as long,",
				"          birthday_short as integer,",
				"          age as integer,",
				"          email as string,",
				"          wechat_id as string,",
				"          reg_origin as integer,",
				"          reg_sub_origin as integer,",
				"          up_origin as integer,",
				"          up_at as integer,",
				"          operator_type as integer,",
				"          operator_id as integer,",
				"          operator_name as string,",
				"          kpoint as integer,",
				"          expire_kp as integer,",
				"          clear_kp as integer,",
				"          spoint as integer,",
				"          expire_sp as integer,",
				"          clear_sp as integer,",
				"          sp_times as integer,",
				"          balance as integer,",
				"          sales_total as decimal(38,18),",
				"          sales_times as integer,",
				"          eform_status as integer,",
				"          create_at as long,",
				"          update_at as long,",
				"          deleted as integer,",
				"          update_operator as string,",
				"          upgrade_type as integer,",
				"          is_hk_member as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     batchSize: 100000,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false,",
				"     partitionBy('roundRobin', 5)) ~> RawComMemberIngest",
				"source(output(",
				"          id as long,",
				"          member_id as string,",
				"          kids as integer,",
				"          kids_age as integer,",
				"          fav_prod as string,",
				"          hobby as string,",
				"          fav_item as string,",
				"          month_income as integer,",
				"          year_income as integer,",
				"          kid1_sex as integer,",
				"          kid1_birthday as integer,",
				"          kid2_sex as integer,",
				"          kid2_birthday as integer,",
				"          from_know as string,",
				"          addr2 as string,",
				"          addr3 as string,",
				"          phone2 as string,",
				"          qq as string,",
				"          weibo as string,",
				"          alipay as string,",
				"          company as string,",
				"          industry as string,",
				"          job as string,",
				"          remark as string,",
				"          bank_number as string,",
				"          bank_name as string,",
				"          is_mail_market as integer,",
				"          company_size as integer,",
				"          is_k11 as integer,",
				"          customer_leader as string,",
				"          update_at as integer,",
				"          deleted as integer,",
				"          xf_vipid as string,",
				"          xf_issuetillid as string,",
				"          xf_groupid16 as string,",
				"          xf_groupid18 as string,",
				"          xf_lastmodby as string,",
				"          xf_lastmodtime as long,",
				"          xf_issuetime as long,",
				"          xf_newaccumpur as long,",
				"          xf_newttlpurcount as integer,",
				"          xf_ismainvip as integer,",
				"          xf_vipcardtype as integer,",
				"          xf_club as string,",
				"          xf_joinclubdate as long,",
				"          xf_infosource as string,",
				"          xf_applicationid as string,",
				"          xf_applicationdate as long,",
				"          xf_certificatetype as string,",
				"          xf_passwordflag as string,",
				"          xf_zone as string,",
				"          xf_region as string,",
				"          xf_educationcode as string,",
				"          xf_smscontact as integer,",
				"          xf_emailcontact as integer,",
				"          xf_phonecontact as integer,",
				"          xf_postcontact as integer,",
				"          xf_lastupdowndate as long,",
				"          xf_lastexpirydate as long,",
				"          xf_language as integer,",
				"          xf_tochinatimes as string,",
				"          xf_tochinareason as string,",
				"          xf_nameoncard as string,",
				"          xf_title as string,",
				"          xf_monthlyincome as string,",
				"          xf_companyname as string,",
				"          xf_businesstitle as string,",
				"          xf_occupation as string,",
				"          xf_visitk11reason as string,",
				"          xf_allowsendpromomsg as string,",
				"          xf_catofpromomsg as string,",
				"          xf_allowsharemyinfo as string,",
				"          xf_compofsharemyinfo as string,",
				"          xf_agegroup as string,",
				"          xf_references as string,",
				"          xf_childagegroup as string,",
				"          xf_terminalip as string,",
				"          xf_requested as string,",
				"          xf_likeproductother as string,",
				"          xf_interestother as string,",
				"          xf_tradesources as string,",
				"          xf_shownameoncardtype as integer,",
				"          xf_currentrewardbonus_cs as integer,",
				"          active as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          join_show as string,",
				"          avg_expense as integer,",
				"          trip_mode as string,",
				"          fz_bonus_expire_at as decimal(38,18),",
				"          fz_expire_at as decimal(38,18),",
				"          xf_populationattribute as string,",
				"          xf_memberstatus as integer,",
				"          person as string,",
				"          requested_source as string,",
				"          employeeno as string,",
				"          activityname as string,",
				"          xf_storecode as string,",
				"          xf_employeeno as string,",
				"          xf_requested_relationship as string,",
				"          xf_references_phone as string,",
				"          push_classification as string,",
				"          xf_remark as string,",
				"          xf_special_remark as string,",
				"          xf_sales_ticket as string,",
				"          xf_head_img as string,",
				"          xf_vipaccountno as string,",
				"          xf_kpoint_total as integer,",
				"          xf_personal_needs as string,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     batchSize: 100000,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false,",
				"     partitionBy('roundRobin', 5)) ~> RawComMemberExtendIngest",
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestCDMCUSTOMERMAPPING",
				"RawComMemberIngest, RawComMemberExtendIngest join(RawComMemberIngest@member_id == RawComMemberExtendIngest@member_id,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinComMemberExtend",
				"JoinComMemberExtend select(mapColumn(",
				"          member_id = RawComMemberIngest@member_id,",
				"          vip_code,",
				"          union_id,",
				"          first_pay,",
				"          last_pay,",
				"          up_origin,",
				"          operator_type,",
				"          kpoint,",
				"          expire_kp,",
				"          clear_kp,",
				"          spoint,",
				"          expire_sp,",
				"          clear_sp,",
				"          sp_times,",
				"          balance,",
				"          sales_total,",
				"          sales_times,",
				"          create_at,",
				"          update_operator,",
				"          upgrade_type,",
				"          is_hk_member,",
				"          xf_tochinatimes,",
				"          xf_tochinareason,",
				"          xf_nameoncard,",
				"          xf_visitk11reason,",
				"          xf_compofsharemyinfo,",
				"          xf_references,",
				"          xf_club,",
				"          xf_joinclubdate,",
				"          xf_smscontact,",
				"          xf_emailcontact,",
				"          xf_phonecontact,",
				"          xf_postcontact,",
				"          xf_allowsendpromomsg,",
				"          xf_catofpromomsg,",
				"          xf_allowsharemyinfo,",
				"          is_k11,",
				"          from_know,",
				"          xf_ismainvip,",
				"          xf_vipcardtype,",
				"          member_Insert_Date = RawComMemberIngest@Insert_Date,",
				"          extend_Insert_Date = RawComMemberExtendIngest@Insert_Date,",
				"          deleted = RawComMemberIngest@deleted",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectRelatedColumnfromRaw",
				"SelectRelatedColumnfromTemp, IngestCDMCUSTOMERMAPPING join(member_id == K11PRC_Member_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinComCDMCUSTOMERMAPPING",
				"JoinComCDMCUSTOMERMAPPING select(mapColumn(",
				"          vip_code,",
				"          member_id = Hashed_Member_ID,",
				"          union_id = SelectRelatedColumnfromTemp@union_id,",
				"          first_pay,",
				"          last_pay,",
				"          up_origin,",
				"          operator_type,",
				"          kpoint,",
				"          expire_kp,",
				"          clear_kp,",
				"          spoint,",
				"          expire_sp,",
				"          clear_sp,",
				"          sp_times,",
				"          balance,",
				"          sales_total,",
				"          sales_times,",
				"          create_at,",
				"          update_operator,",
				"          upgrade_type,",
				"          is_hk_member,",
				"          xf_tochinatimes,",
				"          xf_tochinareason,",
				"          xf_nameoncard,",
				"          xf_visitk11reason,",
				"          xf_compofsharemyinfo,",
				"          xf_references,",
				"          xf_club,",
				"          xf_joinclubdate,",
				"          xf_smscontact,",
				"          xf_emailcontact,",
				"          xf_phonecontact,",
				"          xf_postcontact,",
				"          xf_allowsendpromomsg,",
				"          xf_catofpromomsg,",
				"          xf_allowsharemyinfo,",
				"          Customer_UID,",
				"          is_k11,",
				"          from_know,",
				"          xf_ismainvip,",
				"          xf_vipcardtype,",
				"          deleted,",
				"          Customer_UID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantedColumn",
				"DropUnwantedColumn derive(BU_Source = 'K11 PRC',",
				"          Record_ID = \"\",",
				"          Card_Type = toInteger(null()),",
				"          Start_Date = toDate($Start_Date, 'yyyyMMdd'),",
				"          Create_At = toTimestamp(toLong(toString(create_at))*1000,'yyyy-MM-dd HH:mm:ss'),",
				"          First_Pay = toTimestamp(toLong(toString(first_pay))*1000,'yyyy-MM-dd HH:mm:ss'),",
				"          Last_Pay = toTimestamp(toLong(toString(last_pay))*1000,'yyyy-MM-dd HH:mm:ss'),",
				"          Expire_Kpoint = toTimestamp(toLong(toString(expire_kp))*1000,'yyyy-MM-dd HH:mm:ss'),",
				"          Clear_Kpoint = toTimestamp(toLong(toString(clear_kp))*1000,'yyyy-MM-dd HH:mm:ss'),",
				"          Expire_Spoint = toTimestamp(toLong(toString(expire_sp))*1000,'yyyy-MM-dd HH:mm:ss'),",
				"          Clear_Spoint = toTimestamp(toLong(toString(clear_sp))*1000,'yyyy-MM-dd HH:mm:ss'),",
				"          Join_Club_Date = toTimestamp(toLong(toString(xf_joinclubdate))*1000,'yyyy-MM-dd HH:mm:ss'),",
				"          End_Date = toDate(null()),",
				"          Is_Current = 1) ~> AddColumn",
				"SelectRelatedColumnfromRaw select(mapColumn(",
				"          member_id,",
				"          vip_code,",
				"          union_id,",
				"          first_pay,",
				"          last_pay,",
				"          up_origin,",
				"          operator_type,",
				"          kpoint,",
				"          expire_kp,",
				"          clear_kp,",
				"          spoint,",
				"          expire_sp,",
				"          clear_sp,",
				"          sp_times,",
				"          balance,",
				"          sales_total,",
				"          sales_times,",
				"          create_at,",
				"          update_operator,",
				"          upgrade_type,",
				"          is_hk_member,",
				"          deleted,",
				"          xf_tochinatimes,",
				"          xf_tochinareason,",
				"          xf_nameoncard,",
				"          xf_visitk11reason,",
				"          xf_compofsharemyinfo,",
				"          xf_references,",
				"          xf_club,",
				"          xf_joinclubdate,",
				"          xf_smscontact,",
				"          xf_emailcontact,",
				"          xf_phonecontact,",
				"          xf_postcontact,",
				"          xf_allowsendpromomsg,",
				"          xf_catofpromomsg,",
				"          xf_allowsharemyinfo,",
				"          is_k11,",
				"          from_know,",
				"          xf_ismainvip,",
				"          xf_vipcardtype,",
				"          deleted",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRelatedColumnfromTemp",
				"AddColumn aggregate(groupBy(Record_ID,",
				"          Customer_UID,",
				"          member_id,",
				"          BU_Source,",
				"          vip_code,",
				"          union_id,",
				"          AddColumn@First_Pay,",
				"          AddColumn@Last_Pay,",
				"          is_k11,",
				"          from_know,",
				"          xf_ismainvip,",
				"          Card_Type,",
				"          xf_vipcardtype,",
				"          up_origin,",
				"          operator_type,",
				"          kpoint,",
				"          Expire_Kpoint,",
				"          Clear_Kpoint,",
				"          spoint,",
				"          Expire_Spoint,",
				"          Clear_Spoint,",
				"          sp_times,",
				"          balance,",
				"          sales_total,",
				"          sales_times,",
				"          AddColumn@Create_At,",
				"          deleted,",
				"          update_operator,",
				"          upgrade_type,",
				"          is_hk_member,",
				"          xf_tochinatimes,",
				"          xf_tochinareason,",
				"          xf_nameoncard,",
				"          xf_visitk11reason,",
				"          xf_compofsharemyinfo,",
				"          xf_references,",
				"          xf_club,",
				"          Join_Club_Date,",
				"          xf_smscontact,",
				"          xf_emailcontact,",
				"          xf_phonecontact,",
				"          xf_postcontact,",
				"          xf_allowsendpromomsg,",
				"          xf_allowsharemyinfo,",
				"          xf_catofpromomsg,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current),",
				"     count = count()) ~> Dedup",
				"Dedup sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Record_ID,",
				"          Customer_UID,",
				"          Personal_Customer_ID = member_id,",
				"          BU_Source,",
				"          VIP_Code = vip_code,",
				"          Union_ID = union_id,",
				"          First_Pay,",
				"          Last_Pay,",
				"          Is_K11 = is_k11,",
				"          From_Know = from_know,",
				"          Is_Main_Card = xf_ismainvip,",
				"          Card_Type,",
				"          VIP_Card_Type = xf_vipcardtype,",
				"          Up_Origin = up_origin,",
				"          Operator_Type = operator_type,",
				"          Member_Kpoint = kpoint,",
				"          Expire_Kpoint,",
				"          Clear_Kpoint,",
				"          Member_Spoint = spoint,",
				"          Expire_Spoint,",
				"          Clear_Spoint,",
				"          Spoint_Times = sp_times,",
				"          Member_Balance = balance,",
				"          Sales_Total = sales_total,",
				"          Sales_Times = sales_times,",
				"          Create_At,",
				"          Member_Deleted = deleted,",
				"          Update_Operator = update_operator,",
				"          Upgrade_Type = upgrade_type,",
				"          Is_HK_Member = is_hk_member,",
				"          To_China_Times = xf_tochinatimes,",
				"          To_China_Reason = xf_tochinareason,",
				"          Name_On_Card = xf_nameoncard,",
				"          Visit_K11_Reason = xf_visitk11reason,",
				"          Company_Share_Info = xf_compofsharemyinfo,",
				"          Member_References = xf_references,",
				"          VIP_Club = xf_club,",
				"          Join_Club_Date,",
				"          SMS_Contact = xf_smscontact,",
				"          Email_Contact = xf_emailcontact,",
				"          Phone_Contact = xf_phonecontact,",
				"          Post_Contact = xf_postcontact,",
				"          Allow_EDM = xf_allowsendpromomsg,",
				"          Allow_Share_Info = xf_allowsharemyinfo,",
				"          EDM_Type = xf_catofpromomsg,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current",
				"     ),",
				"     partitionBy('hash', 2,",
				"          Customer_UID",
				"     )) ~> SinkPreCDMPERSONALPROFILEEXTRA"
			]
		}
	}
}