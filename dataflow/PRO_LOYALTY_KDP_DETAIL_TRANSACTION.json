{
	"name": "PRO_LOYALTY_KDP_DETAIL_TRANSACTION",
	"properties": {
		"folder": {
			"name": "Pro"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vw_Latest_com_kdp_bonus_history",
						"type": "DatasetReference"
					},
					"name": "IngestBonusHistory"
				},
				{
					"dataset": {
						"referenceName": "PUB_LOYALTY_KDP",
						"type": "DatasetReference"
					},
					"name": "LOYALTYKDP"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_PRO_LOYALTY_KDP_DETAIL_TRANSACTION",
						"type": "DatasetReference"
					},
					"name": "SinkToProcessTable",
					"rejectedDataLinkedService": {
						"referenceName": "1crmTagMgmtRawProd",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "AddColumn"
				},
				{
					"name": "DropUnwantColumn"
				},
				{
					"name": "FilterLatest"
				},
				{
					"name": "Dedup"
				},
				{
					"name": "JoinMember"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          id as long,",
				"          kdp_point_id as string,",
				"          burn_kdp_serial_number as string,",
				"          kdp_member_number as string,",
				"          burn_partner_code as string,",
				"          burn_partner_serial_number as string,",
				"          point_source_type as string,",
				"          earn_partner_code as string,",
				"          earn_partner_serial_number as string,",
				"          burn_point_delta as integer,",
				"          burn_transaction_at as string,",
				"          burn_created_at as string,",
				"          create_at as integer,",
				"          update_at as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestBonusHistory",
				"source(output(",
				"          KDP_ID as integer,",
				"          Customer_UID as string,",
				"          Partner_Code as string,",
				"          Member_ID as string,",
				"          BU_Source as string,",
				"          KDP_Member_ID as string,",
				"          Partner_SN as string,",
				"          KP_Order_Code as string,",
				"          KDP_SN as string,",
				"          Cancel_KDP_SN as string,",
				"          KP_UID as string,",
				"          Frozen_Code as string,",
				"          Order_Code as string,",
				"          Used_Kpoint as integer,",
				"          KDP_Amount as integer,",
				"          Bonus_Point as integer,",
				"          Redeem_Cash as decimal(18,0),",
				"          KDP_Type as integer,",
				"          KDP_Remark as string,",
				"          KDP_Status as integer,",
				"          Try_Count as integer,",
				"          Scan_At as timestamp,",
				"          Start_At as timestamp,",
				"          Expire_At as timestamp,",
				"          Cancel_At as timestamp,",
				"          Partner_Campaign_Code as string,",
				"          Partner_Campaign_Type as string,",
				"          Create_At as timestamp,",
				"          Update_At as timestamp,",
				"          Event_ID as integer,",
				"          Tier_ID as integer,",
				"          Tier_Name as string,",
				"          Special_Tier_ID as integer,",
				"          Pay_Type_ID as integer,",
				"          Mall_ID as string,",
				"          Is_Returned as integer,",
				"          Return_Origin_No as string,",
				"          Kpoint_Channel as integer,",
				"          Kpoint_Type as integer,",
				"          Discount_Amount as decimal(18,0),",
				"          GV_Amount as decimal(18,0),",
				"          Sales_Amount as decimal(18,0),",
				"          Kpoint_Status as integer,",
				"          FZ_Channel as integer,",
				"          Is_Confirm as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> LOYALTYKDP",
				"DropUnwantColumn derive(BU_Source = 'K11 PRC',",
				"          Start_Date = toDate($Start_Date, 'yyyyMMdd'),",
				"          End_Date = toTimestamp(toString(null())),",
				"          Is_Current = 1,",
				"          Tier_Upgrade_Unique_ID = id,",
				"          Create_At = toTimestamp((toInteger(toString(create_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Update_At = toTimestamp((toInteger(toString(update_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss')) ~> AddColumn",
				"FilterLatest select(mapColumn(",
				"          id,",
				"          kdp_point_id,",
				"          burn_kdp_serial_number,",
				"          kdp_member_number,",
				"          burn_partner_code,",
				"          burn_partner_serial_number,",
				"          point_source_type,",
				"          earn_partner_code,",
				"          earn_partner_serial_number,",
				"          burn_point_delta,",
				"          burn_transaction_at,",
				"          burn_created_at,",
				"          create_at,",
				"          update_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantColumn",
				"IngestBonusHistory filter(toDate(Insert_Date)>=addDays(toDate(currentUTC()+hours(8)),0)) ~> FilterLatest",
				"LOYALTYKDP aggregate(groupBy(Customer_UID,",
				"          Member_ID,",
				"          KDP_Member_ID,",
				"          Partner_SN),",
				"     count = count()) ~> Dedup",
				"AddColumn, Dedup join(kdp_member_number == KDP_Member_ID",
				"     && earn_partner_serial_number == Partner_SN,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMember",
				"JoinMember sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          KDP_Bonus_ID = id,",
				"          Kdp_Point_ID = kdp_point_id,",
				"          BU_Source,",
				"          Burn_Kdp_SN = burn_kdp_serial_number,",
				"          Kdp_Member_No = kdp_member_number,",
				"          Burn_Partner_Code = burn_partner_code,",
				"          Burn_Partner_SN = burn_partner_serial_number,",
				"          Point_Source_Type = point_source_type,",
				"          Earn_Partner_Code = earn_partner_code,",
				"          Earn_Partner_SN = earn_partner_serial_number,",
				"          Burn_Point_Delta = burn_point_delta,",
				"          Burn_Transaction_At = burn_transaction_at,",
				"          Burn_Created_At = burn_created_at,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current,",
				"          Create_At = AddColumn@Create_At,",
				"          Update_At = AddColumn@Update_At,",
				"          Customer_UID,",
				"          Member_ID",
				"     )) ~> SinkToProcessTable"
			]
		}
	}
}