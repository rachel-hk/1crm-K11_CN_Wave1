{
	"name": "SFMC_LOYALTY_KDP_copy1",
	"properties": {
		"folder": {
			"name": "SFMC"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PUB_LOYALTY_KDP",
						"type": "DatasetReference"
					},
					"name": "LOYALTYKDP"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TEMP_SFMC_LOYALTY_KDP",
						"type": "DatasetReference"
					},
					"name": "SinkToDataLake"
				},
				{
					"dataset": {
						"referenceName": "SFMC_RECORD_COUNT",
						"type": "DatasetReference"
					},
					"name": "SinkToRecordCount"
				}
			],
			"transformations": [
				{
					"name": "FilterUID"
				},
				{
					"name": "RecordCount"
				},
				{
					"name": "AddColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          KDP_ID as integer,",
				"          Customer_UID as string,",
				"          Partner_Code as string,",
				"          Member_ID as string,",
				"          BU_Source as string,",
				"          KDP_Member_ID as string,",
				"          Partner_SN as string,",
				"          KP_Order_Code as string,",
				"          KDP_SN as string,",
				"          Cancel_KDP_SN as string,",
				"          KP_UID as string,",
				"          Frozen_Code as string,",
				"          Order_Code as string,",
				"          Used_Kpoint as integer,",
				"          KDP_Amount as integer,",
				"          Bonus_Point as integer,",
				"          Redeem_Cash as decimal(18,0),",
				"          KDP_Type as integer,",
				"          KDP_Remark as string,",
				"          KDP_Status as integer,",
				"          Try_Count as integer,",
				"          Scan_At as timestamp,",
				"          Start_At as timestamp,",
				"          Expire_At as timestamp,",
				"          Cancel_At as timestamp,",
				"          Partner_Campaign_Code as string,",
				"          Partner_Campaign_Type as string,",
				"          Create_At as timestamp,",
				"          Update_At as timestamp,",
				"          Event_ID as integer,",
				"          Tier_ID as integer,",
				"          Tier_Name as string,",
				"          Special_Tier_ID as integer,",
				"          Pay_Type_ID as integer,",
				"          Mall_ID as string,",
				"          Is_Returned as integer,",
				"          Return_Origin_No as string,",
				"          Kpoint_Channel as integer,",
				"          Kpoint_Type as integer,",
				"          Discount_Amount as decimal(18,0),",
				"          GV_Amount as decimal(18,0),",
				"          Sales_Amount as decimal(18,0),",
				"          Kpoint_Status as integer,",
				"          FZ_Channel as integer,",
				"          Is_Confirm as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> LOYALTYKDP",
				"LOYALTYKDP filter(Customer_UID == 'K11PRCad6b90657f5659b419dc815e0535731f' ||",
				"Customer_UID == 'K11PRCd4c4059fba5f5b7f2305f4820808aedd' ||",
				"Customer_UID == 'K11PRCc2fc9dbdc5e313dedf4ff0dedb1c7e7f' ||",
				"Customer_UID == 'K11PRC3800a707dcabae61243891064692c0a0' ||",
				"Customer_UID == 'K11PRC3f6914f93ed66d31df0228621988aaf8' ||",
				"Customer_UID == 'K11PRC2aba127721d116e74b798a456bc4257b' ||",
				"Customer_UID == 'K11PRC4af682431d0cf15f36b58c6408065d7c' ||",
				"Customer_UID == 'K11PRC5d387abdd609cb34b8fca8456ace9013' ||",
				"Customer_UID == 'K11PRC7937fade358df925faae23b0c44e582a' ||",
				"Customer_UID == 'K11PRCa1278dcb429ba81922d882fdcb2c3891') ~> FilterUID",
				"FilterUID aggregate(groupBy({1} = 1),",
				"     Record_Count = count(1)) ~> RecordCount",
				"RecordCount derive(Name = 'TEMP_SFMC_LOYALTY_KDP',",
				"          Insert_Date = currentUTC()) ~> AddColumns",
				"FilterUID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkToDataLake",
				"AddColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Record_Count as integer,",
				"          Insert_Date as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkToRecordCount"
			]
		}
	}
}