{
	"name": "PRO_TRAN_ORDER_20230724",
	"properties": {
		"folder": {
			"name": "Pro"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vw_Latest_com_member_order",
						"type": "DatasetReference"
					},
					"name": "IngestRawComMemberOrder"
				},
				{
					"dataset": {
						"referenceName": "PUB_REF_STORE",
						"type": "DatasetReference"
					},
					"name": "IngestComStore"
				},
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestCDMCUSTOMERMAPPING"
				},
				{
					"dataset": {
						"referenceName": "vw_Latest_com_member_order_extend",
						"type": "DatasetReference"
					},
					"name": "IngestRawComMemberOrderExtend"
				},
				{
					"dataset": {
						"referenceName": "vw_Latest_mall_order",
						"type": "DatasetReference"
					},
					"name": "IngestMallOrder"
				},
				{
					"dataset": {
						"referenceName": "PUB_REF_PROMOTION",
						"type": "DatasetReference"
					},
					"name": "IngestREFPROMOTION"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_PRO_TRAN_ORDER",
						"type": "DatasetReference"
					},
					"name": "SinkToProcessTable"
				}
			],
			"transformations": [
				{
					"name": "JoinComStore"
				},
				{
					"name": "DropColumnFromREFSTORE"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "JoinCDMCUSTOMERMAPPING"
				},
				{
					"name": "DropColumnFromCDMCUSTOMERMAPPING"
				},
				{
					"name": "JoinRawComMemberOrderExtend"
				},
				{
					"name": "DropColumnFromComMemberOrderExtend"
				},
				{
					"name": "JoinMallOder"
				},
				{
					"name": "DropColumnFromMallOrder"
				},
				{
					"name": "JoinREFPROMOTION"
				},
				{
					"name": "DropColumnFromREFPROM"
				},
				{
					"name": "FilterOrder"
				},
				{
					"name": "FilterLatestExtend"
				},
				{
					"name": "FilterMall"
				},
				{
					"name": "Dedup"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          id as long,",
				"          member_id as string,",
				"          level_id as long,",
				"          special_level_id as long,",
				"          special_level_time as long,",
				"          area_id as long,",
				"          order_code as string,",
				"          origin_order_code as string,",
				"          origin_parent_order_code as string,",
				"          wechat_pay_code as string,",
				"          store_code as string,",
				"          origin_amount as string,",
				"          not_discount_amount as string,",
				"          sales_amount as string,",
				"          real_amount as string,",
				"          kp_amount as string,",
				"          gvamount as string,",
				"          bonus_point as long,",
				"          bonus_type as string,",
				"          order_at as long,",
				"          order_source as long,",
				"          status as integer,",
				"          cancel_at as long,",
				"          remark as string,",
				"          return_amount as string,",
				"          return_bonus_point as long,",
				"          api_key as string,",
				"          async_status as integer,",
				"          central_store_code as string,",
				"          create_at as long,",
				"          update_at as long,",
				"          deleted as long,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestRawComMemberOrder",
				"source(output(",
				"          Store_Code as string,",
				"          Store_BU as string,",
				"          SB_code as string,",
				"          SB_name as string,",
				"          Store_Name as string,",
				"          Store_Intro as string,",
				"          Mall_Code as string,",
				"          Store_Status as integer,",
				"          Store_Floor as string,",
				"          Store_Unitcode as string,",
				"          Store_Classify as string,",
				"          SB1_Code as string,",
				"          SB1_Name as string,",
				"          SB2_Code as string,",
				"          SB2_Name as string,",
				"          Store_Cate as string,",
				"          Is_Channel_No as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestComStore",
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestCDMCUSTOMERMAPPING",
				"source(output(",
				"          id as long,",
				"          order_code as string,",
				"          operator_id as long,",
				"          operator_name as string,",
				"          fz_channel as integer,",
				"          sales_ticket as string,",
				"          pay_ticket as string,",
				"          online_category as string,",
				"          kpos_input_type as integer,",
				"          old_kpos_input_type as integer,",
				"          order_promotion_discount as string,",
				"          order_delivery_fee as string,",
				"          create_at as integer,",
				"          update_at as long,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestRawComMemberOrderExtend",
				"source(output(",
				"          id as long,",
				"          area_id as integer,",
				"          mer_id as integer,",
				"          mch_id as string,",
				"          version as integer,",
				"          store_code as string,",
				"          user_id as integer,",
				"          user_area_id as integer,",
				"          user_level as integer,",
				"          member_id as string,",
				"          union_id as string,",
				"          open_id as string,",
				"          order_no as string,",
				"          order_status as integer,",
				"          shipping_status as integer,",
				"          pay_status as integer,",
				"          refund_status as integer,",
				"          card_status as integer,",
				"          profit_status as integer,",
				"          invoice_status as integer,",
				"          invoice_amount as string,",
				"          pay_code as string,",
				"          pay_name as string,",
				"          origin_amount as string,",
				"          shipping_price as decimal(38,18),",
				"          kpoint_amount as string,",
				"          kdp_amount as string,",
				"          coupon_amount as string,",
				"          prom_amount as string,",
				"          real_amount as string,",
				"          discount as decimal(38,18),",
				"          shipping_time as integer,",
				"          confirm_time as integer,",
				"          pay_time as long,",
				"          get_point as long,",
				"          type as integer,",
				"          prom_id as string,",
				"          cost_kpoint as integer,",
				"          cost_kpoint_type as integer,",
				"          cost_spoint as integer,",
				"          cost_kdp as integer,",
				"          consignee as string,",
				"          mobile as string,",
				"          goods_name as string,",
				"          goods_sn as string,",
				"          shipping_way as integer,",
				"          pay_expired_time as long,",
				"          confirm_expired_time as long,",
				"          remark as string,",
				"          refund_id as integer,",
				"          channel_id as integer,",
				"          return_time as integer,",
				"          order_from as string,",
				"          create_at as long,",
				"          update_at as long,",
				"          time_of_day as integer,",
				"          time_of_hour as integer,",
				"          deleted as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestMallOrder",
				"source(output(",
				"          Prom_ID as string,",
				"          Area_ID as integer,",
				"          Source_BU as string,",
				"          Prom_Name as string,",
				"          Prom_Type as string,",
				"          Start_Time as integer,",
				"          End_Time as integer,",
				"          Is_Pause as integer,",
				"          Prom_Status as integer,",
				"          Is_Show as integer,",
				"          Prom_Warm_Time as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestREFPROMOTION",
				"FilterOrder, IngestComStore join(IngestRawComMemberOrder@store_code == IngestComStore@Store_Code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinComStore",
				"JoinComStore select(mapColumn(",
				"          id,",
				"          member_id,",
				"          level_id,",
				"          special_level_id,",
				"          special_level_time,",
				"          area_id,",
				"          order_code,",
				"          origin_order_code,",
				"          origin_parent_order_code,",
				"          wechat_pay_code,",
				"          store_code = IngestRawComMemberOrder@store_code,",
				"          origin_amount,",
				"          not_discount_amount,",
				"          sales_amount,",
				"          real_amount,",
				"          kp_amount,",
				"          gvamount,",
				"          bonus_point,",
				"          bonus_type,",
				"          order_at,",
				"          order_source,",
				"          status,",
				"          cancel_at,",
				"          remark,",
				"          return_amount,",
				"          return_bonus_point,",
				"          api_key,",
				"          async_status,",
				"          central_store_code,",
				"          create_at,",
				"          update_at,",
				"          deleted,",
				"          store_name = Store_Name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropColumnFromREFSTORE",
				"DropColumnFromREFPROM derive(Start_Date = toDate($Start_Date, 'yyyyMMdd'),",
				"          End_Date = toDate(toString(null())),",
				"          Is_Current = 1,",
				"          BU_Source = 'K11 PRC',",
				"          Order_At = toTimestamp((toInteger(toString(order_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Cancel_At = toTimestamp((toInteger(toString(cancel_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Create_At = toTimestamp((toInteger(toString(create_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Update_At = toTimestamp((toInteger(toString(update_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Special_Level_Time = toTimestamp((toInteger(toString(special_level_time))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Order_Channel = \"\",",
				"          type = \"\",",
				"          kpoint = toInteger(null())) ~> AddColumn",
				"AddColumn, IngestCDMCUSTOMERMAPPING join(member_id == K11PRC_Member_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCDMCUSTOMERMAPPING",
				"JoinCDMCUSTOMERMAPPING select(mapColumn(",
				"          id,",
				"          member_id = Hashed_Member_ID,",
				"          level_id,",
				"          special_level_id,",
				"          special_level_time = AddColumn@Special_Level_Time,",
				"          area_id,",
				"          order_code,",
				"          origin_order_code,",
				"          origin_parent_order_code,",
				"          wechat_pay_code,",
				"          store_code,",
				"          origin_amount,",
				"          not_discount_amount,",
				"          sales_amount,",
				"          real_amount,",
				"          kp_amount,",
				"          gvamount,",
				"          bonus_point,",
				"          bonus_type,",
				"          order_at = AddColumn@Order_At,",
				"          order_source,",
				"          status,",
				"          cancel_at = AddColumn@Cancel_At,",
				"          remark,",
				"          return_amount,",
				"          return_bonus_point,",
				"          api_key,",
				"          async_status,",
				"          central_store_code,",
				"          create_at = AddColumn@Create_At,",
				"          update_at = AddColumn@Update_At,",
				"          deleted,",
				"          type,",
				"          kpoint,",
				"          online_category,",
				"          kpos_input_type,",
				"          order_promotion_discount,",
				"          order_delivery_fee,",
				"          prom_id = Prom_ID,",
				"          Prom_Name,",
				"          Start_Date = AddColumn@Start_Date,",
				"          End_Date = AddColumn@End_Date,",
				"          Is_Current = AddColumn@Is_Current,",
				"          BU_Source,",
				"          Customer_UID,",
				"          fz_channel,",
				"          store_name,",
				"          Union_ID,",
				"          Order_Channel,",
				"          Create_At = AddColumn@Create_At,",
				"          Update_At = AddColumn@Update_At",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropColumnFromCDMCUSTOMERMAPPING",
				"DropColumnFromREFSTORE, FilterLatestExtend join(DropColumnFromREFSTORE@order_code == IngestRawComMemberOrderExtend@order_code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinRawComMemberOrderExtend",
				"JoinRawComMemberOrderExtend select(mapColumn(",
				"          id = DropColumnFromREFSTORE@id,",
				"          member_id,",
				"          level_id,",
				"          special_level_id,",
				"          special_level_time,",
				"          area_id,",
				"          order_code = DropColumnFromREFSTORE@order_code,",
				"          origin_order_code,",
				"          origin_parent_order_code,",
				"          wechat_pay_code,",
				"          store_code,",
				"          origin_amount,",
				"          not_discount_amount,",
				"          sales_amount,",
				"          real_amount,",
				"          kp_amount,",
				"          gvamount,",
				"          bonus_point,",
				"          bonus_type,",
				"          order_at,",
				"          order_source,",
				"          status,",
				"          cancel_at,",
				"          remark,",
				"          return_amount,",
				"          return_bonus_point,",
				"          api_key,",
				"          async_status,",
				"          central_store_code,",
				"          create_at = DropColumnFromREFSTORE@create_at,",
				"          update_at = DropColumnFromREFSTORE@update_at,",
				"          deleted,",
				"          store_name,",
				"          online_category,",
				"          kpos_input_type,",
				"          order_promotion_discount,",
				"          order_delivery_fee,",
				"          create_at = IngestRawComMemberOrderExtend@create_at,",
				"          update_at = IngestRawComMemberOrderExtend@update_at,",
				"          fz_channel",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropColumnFromComMemberOrderExtend",
				"DropColumnFromComMemberOrderExtend, FilterMall join(origin_order_code == order_no,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMallOder",
				"JoinMallOder select(mapColumn(",
				"          id = DropColumnFromComMemberOrderExtend@id,",
				"          member_id = DropColumnFromComMemberOrderExtend@member_id,",
				"          level_id,",
				"          special_level_id,",
				"          special_level_time,",
				"          area_id = DropColumnFromComMemberOrderExtend@area_id,",
				"          order_code,",
				"          origin_order_code,",
				"          origin_parent_order_code,",
				"          wechat_pay_code,",
				"          store_code = DropColumnFromComMemberOrderExtend@store_code,",
				"          origin_amount = DropColumnFromComMemberOrderExtend@origin_amount,",
				"          not_discount_amount,",
				"          sales_amount,",
				"          real_amount = DropColumnFromComMemberOrderExtend@real_amount,",
				"          kp_amount,",
				"          gvamount,",
				"          bonus_point,",
				"          bonus_type,",
				"          order_at,",
				"          order_source,",
				"          status,",
				"          cancel_at,",
				"          remark = DropColumnFromComMemberOrderExtend@remark,",
				"          return_amount,",
				"          return_bonus_point,",
				"          api_key,",
				"          async_status,",
				"          central_store_code,",
				"          create_at = DropColumnFromComMemberOrderExtend@create_at,",
				"          update_at = DropColumnFromComMemberOrderExtend@update_at,",
				"          deleted = DropColumnFromComMemberOrderExtend@deleted,",
				"          store_name,",
				"          online_category,",
				"          kpos_input_type,",
				"          order_promotion_discount,",
				"          order_delivery_fee,",
				"          area_id = IngestMallOrder@area_id,",
				"          mer_id,",
				"          mch_id,",
				"          version,",
				"          store_code = IngestMallOrder@store_code,",
				"          user_id,",
				"          user_area_id,",
				"          user_level,",
				"          prom_id,",
				"          fz_channel",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropColumnFromMallOrder",
				"DropColumnFromMallOrder, IngestREFPROMOTION join(DropColumnFromMallOrder@prom_id == IngestREFPROMOTION@Prom_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinREFPROMOTION",
				"JoinREFPROMOTION select(mapColumn(",
				"          id,",
				"          member_id,",
				"          level_id,",
				"          special_level_id,",
				"          special_level_time,",
				"          area_id = DropColumnFromMallOrder@area_id,",
				"          order_code,",
				"          origin_order_code,",
				"          origin_parent_order_code,",
				"          wechat_pay_code,",
				"          store_code,",
				"          origin_amount,",
				"          not_discount_amount,",
				"          sales_amount,",
				"          real_amount,",
				"          kp_amount,",
				"          gvamount,",
				"          bonus_point,",
				"          bonus_type,",
				"          order_at,",
				"          order_source,",
				"          status,",
				"          cancel_at,",
				"          remark,",
				"          return_amount,",
				"          return_bonus_point,",
				"          api_key,",
				"          async_status,",
				"          central_store_code,",
				"          create_at,",
				"          update_at,",
				"          deleted,",
				"          online_category,",
				"          kpos_input_type,",
				"          order_promotion_discount,",
				"          order_delivery_fee,",
				"          Prom_ID = DropColumnFromMallOrder@prom_id,",
				"          Prom_Name,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current,",
				"          fz_channel,",
				"          store_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropColumnFromREFPROM",
				"IngestRawComMemberOrder filter(toDate(Insert_Date) == addDays(currentDate(),-1)) ~> FilterOrder",
				"IngestRawComMemberOrderExtend filter(toDate(Insert_Date)==addDays(currentDate(),-1)) ~> FilterLatestExtend",
				"IngestMallOrder filter(toDate(Insert_Date)==addDays(currentDate(),-1)) ~> FilterMall",
				"DropColumnFromCDMCUSTOMERMAPPING aggregate(groupBy(id,",
				"          member_id,",
				"          level_id,",
				"          special_level_id,",
				"          special_level_time,",
				"          area_id,",
				"          order_code,",
				"          origin_order_code,",
				"          origin_parent_order_code,",
				"          wechat_pay_code,",
				"          store_code,",
				"          origin_amount,",
				"          not_discount_amount,",
				"          sales_amount,",
				"          real_amount,",
				"          kp_amount,",
				"          gvamount,",
				"          bonus_point,",
				"          bonus_type,",
				"          order_at,",
				"          order_source,",
				"          status,",
				"          cancel_at,",
				"          remark,",
				"          return_amount,",
				"          return_bonus_point,",
				"          api_key,",
				"          async_status,",
				"          central_store_code,",
				"          create_at,",
				"          update_at,",
				"          deleted,",
				"          type,",
				"          kpoint,",
				"          online_category,",
				"          kpos_input_type,",
				"          order_promotion_discount,",
				"          order_delivery_fee,",
				"          prom_id,",
				"          Prom_Name,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current,",
				"          BU_Source,",
				"          Customer_UID,",
				"          fz_channel,",
				"          store_name,",
				"          Union_ID,",
				"          Order_Channel),",
				"     count = count()) ~> Dedup",
				"Dedup sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Order_SID = id,",
				"          Order_Code = order_code,",
				"          Customer_UID,",
				"          Member_ID = member_id,",
				"          BU_Source,",
				"          Tier_ID = level_id,",
				"          Special_Tier_ID = special_level_id,",
				"          Provider_Key = api_key,",
				"          Trans_Channel = fz_channel,",
				"          Special_Level_Time = special_level_time,",
				"          Order_Channel,",
				"          Area_ID = area_id,",
				"          Union_ID,",
				"          Origin_Order_Code = origin_order_code,",
				"          Origin_Parent_Order_Code = origin_parent_order_code,",
				"          Wechat_Pay_Code = wechat_pay_code,",
				"          Store_Code = store_code,",
				"          Store_Name = store_name,",
				"          Origin_Amount = origin_amount,",
				"          Not_Discount_Amount = not_discount_amount,",
				"          Sales_Amount = sales_amount,",
				"          Real_Amount = real_amount,",
				"          Kpoint_Amount = kp_amount,",
				"          GV_Amount = gvamount,",
				"          Bonus_Point = bonus_point,",
				"          Bonus_Type = bonus_type,",
				"          Order_At = order_at,",
				"          Order_Source = order_source,",
				"          Order_Status = status,",
				"          Cancel_At = cancel_at,",
				"          Order_Remark = remark,",
				"          Return_Amount = return_amount,",
				"          Return_Bonus_Point = return_bonus_point,",
				"          Central_Store_Code = central_store_code,",
				"          Online_Type = online_category,",
				"          KPos_Input = kpos_input_type,",
				"          Order_Prom_Discount = order_promotion_discount,",
				"          Order_Delivery_Fee = order_delivery_fee,",
				"          Pay_Type = type,",
				"          Used_Kpoint = kpoint,",
				"          Prom_ID = prom_id,",
				"          Prom_Name,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current,",
				"          Create_At = create_at,",
				"          Update_At = update_at",
				"     )) ~> SinkToProcessTable"
			]
		}
	}
}