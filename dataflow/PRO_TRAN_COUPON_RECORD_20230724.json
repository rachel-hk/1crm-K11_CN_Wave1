{
	"name": "PRO_TRAN_COUPON_RECORD_20230724",
	"properties": {
		"folder": {
			"name": "Pro"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vw_Latest_we_card_record",
						"type": "DatasetReference"
					},
					"name": "IngestTRANCOUPONRECORD"
				},
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestCDMCUSTOMERMAPPING"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_PRO_TRAN_COUPON_RECORD",
						"type": "DatasetReference"
					},
					"name": "SinkToProcessTable"
				}
			],
			"transformations": [
				{
					"name": "JoinToGetCustomerUID",
					"description": "“IngestRawComParkingOrder”和“IngestCDMCUSTOMERMAPPING”上的 内部 联接"
				},
				{
					"name": "DropUnwantedColumns"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "DedupCoupon"
				},
				{
					"name": "FilterLatest"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          id as long,",
				"          account_id as integer,",
				"          app_id as string,",
				"          cid as integer,",
				"          card_id as string,",
				"          card_type as string,",
				"          outer_id as integer,",
				"          outer_str as string,",
				"          consume_outer_str as string,",
				"          open_id as string,",
				"          union_id as string,",
				"          member_id as string,",
				"          level_id as long,",
				"          code as string,",
				"          is_give as integer,",
				"          give_code as string,",
				"          give_openid as string,",
				"          consume_source as string,",
				"          staff_openid as string,",
				"          delete_at as integer,",
				"          consume_at as integer,",
				"          consume_amount as string,",
				"          consume_store_code as string,",
				"          consume_app_id as long,",
				"          consume_level_id as integer,",
				"          consume_origin_order_code as string,",
				"          give_at as integer,",
				"          location_name as string,",
				"          status as integer,",
				"          start_at as integer,",
				"          end_at as integer,",
				"          cpc_id as integer,",
				"          cps_id as integer,",
				"          cm_id as integer,",
				"          api_key as string,",
				"          create_at as integer,",
				"          update_at as integer,",
				"          deleted as integer,",
				"          operator_id as integer,",
				"          operator_name as string,",
				"          verify_staff_unionid as string,",
				"          exchange_no as string,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestTRANCOUPONRECORD",
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestCDMCUSTOMERMAPPING",
				"DedupCoupon, IngestCDMCUSTOMERMAPPING join(member_id == K11PRC_Member_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinToGetCustomerUID",
				"JoinToGetCustomerUID select(mapColumn(",
				"          account_id,",
				"          app_id,",
				"          cid,",
				"          card_id,",
				"          card_type,",
				"          outer_id,",
				"          outer_str,",
				"          consume_outer_str,",
				"          open_id,",
				"          union_id = DedupCoupon@union_id,",
				"          member_id = Hashed_Member_ID,",
				"          level_id,",
				"          code,",
				"          is_give,",
				"          give_code,",
				"          give_openid,",
				"          consume_source,",
				"          staff_openid,",
				"          delete_at,",
				"          consume_at,",
				"          consume_amount,",
				"          consume_store_code,",
				"          consume_app_id,",
				"          consume_level_id,",
				"          consume_origin_order_code,",
				"          give_at,",
				"          location_name,",
				"          status,",
				"          start_at,",
				"          end_at,",
				"          cpc_id,",
				"          cps_id,",
				"          cm_id,",
				"          api_key,",
				"          create_at,",
				"          update_at,",
				"          deleted,",
				"          operator_id,",
				"          operator_name,",
				"          verify_staff_unionid,",
				"          exchange_no,",
				"          Customer_UID,",
				"          id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantedColumns",
				"DropUnwantedColumns derive(Start_Date = toDate($Start_Date, 'yyyyMMdd'),",
				"          End_Date = toTimestamp(toString(null())),",
				"          Is_Current = 1,",
				"          BU_Source = 'K11 PRC',",
				"          Consume_At = toTimestamp((toInteger(toString(consume_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Delete_At = toTimestamp((toInteger(toString(delete_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Give_At = toTimestamp((toInteger(toString(give_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Start_At = toTimestamp((toInteger(toString(start_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          End_At = toTimestamp((toInteger(toString(end_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Create_At = toTimestamp((toInteger(toString(create_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Update_At = toTimestamp((toInteger(toString(update_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Coupon_UID = id) ~> AddColumn",
				"FilterLatest aggregate(groupBy(app_id,",
				"          id,",
				"          account_id,",
				"          cid,",
				"          card_id,",
				"          card_type,",
				"          outer_id,",
				"          outer_str,",
				"          consume_outer_str,",
				"          open_id,",
				"          union_id,",
				"          member_id,",
				"          level_id,",
				"          code,",
				"          is_give,",
				"          give_code,",
				"          give_openid,",
				"          consume_source,",
				"          staff_openid,",
				"          delete_at,",
				"          consume_at,",
				"          consume_amount,",
				"          consume_store_code,",
				"          consume_app_id,",
				"          consume_level_id,",
				"          consume_origin_order_code,",
				"          give_at,",
				"          location_name,",
				"          status,",
				"          start_at,",
				"          end_at,",
				"          cpc_id,",
				"          cps_id,",
				"          cm_id,",
				"          api_key,",
				"          create_at,",
				"          update_at,",
				"          deleted,",
				"          operator_id,",
				"          operator_name,",
				"          verify_staff_unionid,",
				"          exchange_no),",
				"     count = count()) ~> DedupCoupon",
				"IngestTRANCOUPONRECORD filter(toDate(Insert_Date)==addDays(currentDate(),-1)) ~> FilterLatest",
				"AddColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Coupon_Code = code,",
				"          Coupon_UID,",
				"          Customer_UID,",
				"          Coupon_ID = card_id,",
				"          BU_Source,",
				"          Account_ID = account_id,",
				"          App_ID = app_id,",
				"          Coupon_Type = card_type,",
				"          Acquire_ID = outer_id,",
				"          Acquaire_Name = outer_str,",
				"          Consume_Name = consume_outer_str,",
				"          Open_ID = open_id,",
				"          Union_ID = union_id,",
				"          Member_ID = member_id,",
				"          Tier_ID = level_id,",
				"          Is_Give = is_give,",
				"          Give_Code = give_code,",
				"          Give_Open_ID = give_openid,",
				"          Consume_Source = consume_source,",
				"          Staff_Open_ID = staff_openid,",
				"          Delete_At = AddColumn@Delete_At,",
				"          Consume_At = AddColumn@Consume_At,",
				"          Consume_Amount = consume_amount,",
				"          Consume_Store_Code = consume_store_code,",
				"          Consume_App_ID = consume_app_id,",
				"          Consume_Tier_ID = consume_level_id,",
				"          Consume_Origin_Order_Code = consume_origin_order_code,",
				"          Give_At = AddColumn@Give_At,",
				"          Location_Name = location_name,",
				"          Coupon_Status = status,",
				"          Start_At = AddColumn@Start_At,",
				"          End_At = AddColumn@End_At,",
				"          Create_At = AddColumn@Create_At,",
				"          Update_At = AddColumn@Update_At,",
				"          Is_Deleted = deleted,",
				"          Exchange_No = exchange_no,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current",
				"     )) ~> SinkToProcessTable"
			]
		}
	}
}