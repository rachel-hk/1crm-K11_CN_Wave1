{
	"name": "PRO_CDM_TIER_UPGRADE_20230724",
	"properties": {
		"folder": {
			"name": "Pro"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vw_Latest_com_member_level_record",
						"type": "DatasetReference"
					},
					"name": "IngestRawLevelRecord"
				},
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestCDMCUSTOMERMAPPING"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_PRO_CDM_TIER_UPGRADE",
						"type": "DatasetReference"
					},
					"name": "SinkToProcessTable",
					"rejectedDataLinkedService": {
						"referenceName": "1crmTagMgmtRawProd",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "AddColumn"
				},
				{
					"name": "JoinMapping"
				},
				{
					"name": "DropUnwantColumn"
				},
				{
					"name": "Dedup"
				},
				{
					"name": "FilterLatest"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          id as long,",
				"          area_id as integer,",
				"          member_id as string,",
				"          account_id as integer,",
				"          open_id as string,",
				"          level_id as integer,",
				"          level_name as string,",
				"          old_level_id as integer,",
				"          old_level_name as string,",
				"          operator_id as integer,",
				"          operator_name as string,",
				"          remark as string,",
				"          reg_origin as integer,",
				"          reg_sub_origin as integer,",
				"          up_origin as integer,",
				"          create_at as integer,",
				"          backup_create_at as integer,",
				"          update_at as integer,",
				"          submit_at as long,",
				"          reach_at as long,",
				"          deleted as integer,",
				"          vip_code as string,",
				"          old_vip_code as string,",
				"          store_code as string,",
				"          upgrade_type as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          level_change_type as integer,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestRawLevelRecord",
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestCDMCUSTOMERMAPPING",
				"DropUnwantColumn derive(BU_Source = 'K11 PRC',",
				"          Start_Date = toDate($Start_Date, 'yyyyMMdd'),",
				"          End_Date = toTimestamp(toString(null())),",
				"          Is_Current = 1,",
				"          Tier_Upgrade_Unique_ID = id,",
				"          Create_At = toTimestamp((toInteger(toString(create_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Update_At = toTimestamp((toInteger(toString(update_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Submit_At = toTimestamp((toInteger(toString(submit_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Reach_At = toTimestamp((toInteger(toString(reach_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss')) ~> AddColumn",
				"Dedup, IngestCDMCUSTOMERMAPPING join(member_id == K11PRC_Member_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMapping",
				"JoinMapping select(mapColumn(",
				"          area_id,",
				"          member_id = Hashed_Member_ID,",
				"          account_id,",
				"          open_id,",
				"          level_id,",
				"          level_name,",
				"          old_level_id,",
				"          old_level_name,",
				"          operator_id,",
				"          operator_name,",
				"          remark,",
				"          up_origin,",
				"          create_at,",
				"          backup_create_at,",
				"          update_at,",
				"          submit_at,",
				"          reach_at,",
				"          deleted,",
				"          old_vip_code,",
				"          vip_code,",
				"          store_code,",
				"          Customer_UID,",
				"          upgrade_type,",
				"          id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantColumn",
				"FilterLatest aggregate(groupBy(area_id,",
				"          member_id,",
				"          account_id,",
				"          open_id,",
				"          level_id,",
				"          level_name,",
				"          old_level_id,",
				"          old_level_name,",
				"          operator_id,",
				"          operator_name,",
				"          remark,",
				"          up_origin,",
				"          create_at,",
				"          backup_create_at,",
				"          update_at,",
				"          submit_at,",
				"          reach_at,",
				"          deleted,",
				"          old_vip_code,",
				"          vip_code,",
				"          store_code,",
				"          upgrade_type,",
				"          id),",
				"     count = count()) ~> Dedup",
				"IngestRawLevelRecord filter(toDate(Insert_Date)==addDays(currentDate(),-1)) ~> FilterLatest",
				"AddColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Tier_Upgrade_Unique_ID,",
				"          Customer_UID,",
				"          Area_ID = area_id,",
				"          Member_ID = member_id,",
				"          BU_Source,",
				"          Account_ID = account_id,",
				"          Open_ID = open_id,",
				"          Tier_ID = level_id,",
				"          Tier_Name = level_name,",
				"          Tier_ID_Old = old_level_id,",
				"          Tier_Name_Old = old_level_name,",
				"          Tier_Remark = remark,",
				"          Upgrade_Origin = up_origin,",
				"          Create_At = AddColumn@Create_At,",
				"          Update_At = AddColumn@Update_At,",
				"          Submit_At = AddColumn@Submit_At,",
				"          Reach_At = AddColumn@Reach_At,",
				"          Is_Deleted = deleted,",
				"          VIP_Code = vip_code,",
				"          VIP_Code_Old = old_vip_code,",
				"          Store_Code = store_code,",
				"          Upgrade_Type = upgrade_type,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current",
				"     )) ~> SinkToProcessTable"
			]
		}
	}
}