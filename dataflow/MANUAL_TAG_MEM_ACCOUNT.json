{
	"name": "MANUAL_TAG_MEM_ACCOUNT",
	"properties": {
		"folder": {
			"name": "Manual_Tag"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestCDMCUSTOMERMAPPING"
				},
				{
					"dataset": {
						"referenceName": "PUB_LOYALTY_KDP",
						"type": "DatasetReference"
					},
					"name": "INGESLOYALTYKDP"
				},
				{
					"dataset": {
						"referenceName": "PUB_vw_CDM_PERSONAL_PROFILE",
						"type": "DatasetReference"
					},
					"name": "CDMPERSONALPROFILE"
				},
				{
					"dataset": {
						"referenceName": "vw_Latest_com_kdp_bonus_history",
						"type": "DatasetReference"
					},
					"name": "KdpBonusHistory"
				},
				{
					"dataset": {
						"referenceName": "vw_Latest_com_member_kdp_use_record",
						"type": "DatasetReference"
					},
					"name": "KdpUseRecord"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_MANUAL_TAG_MEM_ACCOUNT",
						"type": "DatasetReference"
					},
					"name": "SinkToPublishedTable"
				}
			],
			"transformations": [
				{
					"name": "JoinKDP"
				},
				{
					"name": "AggreateKDPEarn"
				},
				{
					"name": "Split"
				},
				{
					"name": "AggreateKDPBalance"
				},
				{
					"name": "DerivedColumn"
				},
				{
					"name": "DropUnwantedColumn"
				},
				{
					"name": "JoinBalance"
				},
				{
					"name": "FilterType"
				},
				{
					"name": "select1"
				},
				{
					"name": "UsedKDP"
				},
				{
					"name": "NewKDPcalculation"
				},
				{
					"name": "KDPNewBalance"
				},
				{
					"name": "join1"
				},
				{
					"name": "TypeSelection"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestCDMCUSTOMERMAPPING",
				"source(output(",
				"          KDP_ID as string,",
				"          Customer_UID as string,",
				"          Partner_Code as string,",
				"          Member_ID as string,",
				"          BU_Source as string,",
				"          KDP_Member_ID as string,",
				"          Partner_SN as string,",
				"          KP_Order_Code as string,",
				"          KDP_SN as string,",
				"          Cancel_KDP_SN as string,",
				"          KP_UID as string,",
				"          Frozen_Code as string,",
				"          Order_Code as string,",
				"          Used_Kpoint as integer,",
				"          KDP_Amount as integer,",
				"          Bonus_Point as integer,",
				"          Redeem_Cash as decimal(18,0),",
				"          KDP_Type as integer,",
				"          KDP_Remark as string,",
				"          KDP_Status as integer,",
				"          Try_Count as integer,",
				"          Scan_At as timestamp,",
				"          Start_At as timestamp,",
				"          Expire_At as timestamp,",
				"          Cancel_At as timestamp,",
				"          Partner_Campaign_Code as string,",
				"          Partner_Campaign_Type as string,",
				"          Create_At as timestamp,",
				"          Update_At as timestamp,",
				"          Event_ID as integer,",
				"          Tier_ID as integer,",
				"          Tier_Name as string,",
				"          Special_Tier_ID as integer,",
				"          Pay_Type_ID as integer,",
				"          Mall_ID as string,",
				"          Is_Returned as integer,",
				"          Return_Origin_No as string,",
				"          Kpoint_Channel as integer,",
				"          Kpoint_Type as integer,",
				"          Discount_Amount as decimal(18,0),",
				"          GV_Amount as decimal(18,0),",
				"          Sales_Amount as decimal(18,0),",
				"          Kpoint_Status as integer,",
				"          FZ_Channel as integer,",
				"          Is_Confirm as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> INGESLOYALTYKDP",
				"source(output(",
				"          Customer_UID as string,",
				"          Personal_Customer_ID as string,",
				"          Area_ID as integer,",
				"          BU_Source as string,",
				"          Name_Cn as string,",
				"          Nick_Name as string,",
				"          Name_En as string,",
				"          Person_Title as string,",
				"          Phone_No as string,",
				"          Phone_Code as string,",
				"          Tel_No as string,",
				"          Level_ID as integer,",
				"          Is_Special_Level as integer,",
				"          Union_ID as string,",
				"          Is_Marry as integer,",
				"          Expire_At as timestamp,",
				"          Cycle_At as timestamp,",
				"          Issue_At as timestamp,",
				"          Person_Status as integer,",
				"          Res_Zone as string,",
				"          Res_City as string,",
				"          Res_Province as string,",
				"          Res_Country as string,",
				"          Res_Address as string,",
				"          Person_Zip as string,",
				"          Person_Gender as integer,",
				"          Person_Birthday as date,",
				"          Birthday_Short as date,",
				"          Fav_Prod as string,",
				"          Person_Hobby as string,",
				"          Fav_Item as string,",
				"          Month_Income as integer,",
				"          Year_Income as integer,",
				"          Family_Monthly_Income as integer,",
				"          Person_Address2 as string,",
				"          Person_Address3 as string,",
				"          Person_Phone2 as string,",
				"          Person_Email as string,",
				"          Person_QQ as string,",
				"          Person_Weibo as string,",
				"          Person_Company as string,",
				"          Person_Industry as string,",
				"          Person_Job as string,",
				"          Is_Mail_Market as string,",
				"          Company_Size as integer,",
				"          Edu_Level as string,",
				"          Reg_Origin as integer,",
				"          Reg_Sub_Origin as integer,",
				"          License_Plate as string,",
				"          Prefer_language as long,",
				"          Person_Religion as string,",
				"          Person_Ethnic as string,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Level_Name as string,",
				"          KDP_Balance as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> CDMPERSONALPROFILE",
				"source(output(",
				"          id as long,",
				"          kdp_point_id as string,",
				"          burn_kdp_serial_number as string,",
				"          kdp_member_number as string,",
				"          burn_partner_code as string,",
				"          burn_partner_serial_number as string,",
				"          point_source_type as string,",
				"          earn_partner_code as string,",
				"          earn_partner_serial_number as string,",
				"          burn_point_delta as integer,",
				"          burn_transaction_at as string,",
				"          burn_created_at as string,",
				"          create_at as integer,",
				"          update_at as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> KdpBonusHistory",
				"source(output(",
				"          id as integer,",
				"          partner_code as string,",
				"          member_id as string,",
				"          kdp_member_id as string,",
				"          partner_serial_number as string,",
				"          kdp_serial_number as string,",
				"          cancel_kdp_serial_number as string,",
				"          kp_unique_id as string,",
				"          frozen_code as string,",
				"          order_code as string,",
				"          kp as long,",
				"          kdp as integer,",
				"          cash as string,",
				"          qrcode as string,",
				"          type as integer,",
				"          remark as string,",
				"          api_key as string,",
				"          status as integer,",
				"          try_count as integer,",
				"          scan_at as long,",
				"          start_at as long,",
				"          expire_at as long,",
				"          cancel_at as long,",
				"          is_return as integer,",
				"          partner_campaign_code as string,",
				"          partner_campaign_type as string,",
				"          create_at as long,",
				"          update_at as long,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> KdpUseRecord",
				"IngestCDMCUSTOMERMAPPING, INGESLOYALTYKDP join(IngestCDMCUSTOMERMAPPING@Customer_UID == INGESLOYALTYKDP@Customer_UID",
				"     && Hashed_Member_ID == Member_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinKDP",
				"Split@Earn aggregate(groupBy(Split@Earn@Customer_UID,",
				"          K11PRC_Member_ID,",
				"          manual_tag_id),",
				"     account_point_earn = sum(KDP_Amount)) ~> AggreateKDPEarn",
				"JoinKDP split(KDP_Type == 1,",
				"     disjoint: false) ~> Split@(Earn, Balance)",
				"FilterType aggregate(groupBy(Split@Balance@Customer_UID,",
				"          K11PRC_Member_ID,",
				"          Union_ID,",
				"          manual_tag_id,",
				"          KDP_Member_ID),",
				"     account_point_balance = sum(KDP_Amount)) ~> AggreateKDPBalance",
				"join1 derive(account_type_id = 1,",
				"          account_status_id = 1,",
				"          account_point_used = 0,",
				"          account_point_expired = 0,",
				"          active_flag = 1,",
				"          create_by = 1,",
				"          create_date = currentUTC(),",
				"          tenant_id = 1,",
				"          decimal_account_point_balance = account_point_balance,",
				"          decimal_account_point_earned = account_point_earn,",
				"          decimal_account_point_used = 0,",
				"          decimal_account_point_expired = 0,",
				"          open_date_utc = currentUTC(),",
				"          open_date_local = currentUTC()+hours(8),",
				"          open_date_str = concat(toString(currentUTC()+hours(8),'yyyy-MM-dd\\'T\\'HH:mm:ss'),'+08:00'),",
				"          id = toInteger(null()),",
				"          returned = toString(null()),",
				"          kp_status = toString(null()),",
				"          is_confirm = toString(null())) ~> DerivedColumn",
				"DerivedColumn select(mapColumn(",
				"          member_id = manual_tag_id,",
				"          account_code = Personal_Customer_ID,",
				"          account_point_earned = earned_kdp,",
				"          account_point_balance = kdp_balance,",
				"          account_type_id,",
				"          account_status_id,",
				"          account_point_used = used_kdp,",
				"          account_point_expired,",
				"          active_flag,",
				"          create_by,",
				"          tenant_id,",
				"          decimal_account_point_balance = kdp_balance,",
				"          decimal_account_point_earned = earned_kdp,",
				"          decimal_account_point_used = used_kdp,",
				"          decimal_account_point_expired,",
				"          open_date_utc,",
				"          open_date_local,",
				"          open_date_str,",
				"          create_date,",
				"          id,",
				"          returned,",
				"          kp_status,",
				"          is_confirm",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> DropUnwantedColumn",
				"AggreateKDPEarn, select1 join(AggreateKDPEarn@Customer_UID == select1@Customer_UID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBalance",
				"Split@Balance filter(KDP_Type == 2) ~> FilterType",
				"CDMPERSONALPROFILE select(mapColumn(",
				"          Customer_UID,",
				"          Personal_Customer_ID,",
				"          account_point_balance = KDP_Balance",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"KdpBonusHistory aggregate(groupBy(earn_partner_serial_number),",
				"     used_kdp = sum(burn_point_delta)) ~> UsedKDP",
				"TypeSelection, UsedKDP join(partner_serial_number == earn_partner_serial_number,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> NewKDPcalculation",
				"NewKDPcalculation aggregate(groupBy(member_id),",
				"     used_kdp = sum(used_kdp),",
				"          earned_kdp = sum(iif(kdp>0,kdp,0)),",
				"          kdp_balance = sum(iif(kdp>0,kdp,0))+sum(used_kdp)) ~> KDPNewBalance",
				"JoinBalance, KDPNewBalance join(K11PRC_Member_ID == member_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"KdpUseRecord filter(or(type==1,type==4)) ~> TypeSelection",
				"DropUnwantedColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          member_id,",
				"          account_code,",
				"          account_point_earned,",
				"          account_point_balance,",
				"          account_type_id,",
				"          account_status_id,",
				"          account_point_used,",
				"          account_point_expired,",
				"          active_flag,",
				"          create_by,",
				"          tenant_id,",
				"          decimal_account_point_balance,",
				"          decimal_account_point_earned,",
				"          decimal_account_point_used,",
				"          decimal_account_point_expired,",
				"          open_date_utc,",
				"          open_date_local,",
				"          open_date_str,",
				"          create_date,",
				"          returned,",
				"          kp_status,",
				"          is_confirm",
				"     )) ~> SinkToPublishedTable"
			]
		}
	}
}