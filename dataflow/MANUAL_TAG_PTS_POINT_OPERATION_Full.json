{
	"name": "MANUAL_TAG_PTS_POINT_OPERATION_Full",
	"properties": {
		"description": "toDate(Start_Date) >= addDays(currentDate(),-3)",
		"folder": {
			"name": "Manual_Tag"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PUB_LOYALTY_KDP",
						"type": "DatasetReference"
					},
					"name": "IngestLOYALTYKDP"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_MANUAL_TAG_PTS_POINT_OPERATION",
						"type": "DatasetReference"
					},
					"name": "SinkToTempTableInSynapse"
				}
			],
			"transformations": [
				{
					"name": "RenamedColumn"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "FilterAccountID"
				},
				{
					"name": "DateAdd8"
				}
			],
			"scriptLines": [
				"source(output(",
				"          KDP_ID as integer,",
				"          Customer_UID as string,",
				"          Partner_Code as string,",
				"          Member_ID as string,",
				"          BU_Source as string,",
				"          KDP_Member_ID as string,",
				"          Partner_SN as string,",
				"          KP_Order_Code as string,",
				"          KDP_SN as string,",
				"          Cancel_KDP_SN as string,",
				"          KP_UID as string,",
				"          Frozen_Code as string,",
				"          Order_Code as string,",
				"          Used_Kpoint as integer,",
				"          KDP_Amount as integer,",
				"          Bonus_Point as integer,",
				"          Redeem_Cash as decimal(18,0),",
				"          KDP_Type as integer,",
				"          KDP_Remark as string,",
				"          KDP_Status as integer,",
				"          Try_Count as integer,",
				"          Scan_At as timestamp,",
				"          Start_At as timestamp,",
				"          Expire_At as timestamp,",
				"          Cancel_At as timestamp,",
				"          Partner_Campaign_Code as string,",
				"          Partner_Campaign_Type as string,",
				"          Create_At as timestamp,",
				"          Update_At as timestamp,",
				"          Event_ID as integer,",
				"          Tier_ID as integer,",
				"          Tier_Name as string,",
				"          Special_Tier_ID as integer,",
				"          Pay_Type_ID as integer,",
				"          Mall_ID as string,",
				"          Is_Returned as integer,",
				"          Return_Origin_No as string,",
				"          Kpoint_Channel as integer,",
				"          Kpoint_Type as integer,",
				"          Discount_Amount as decimal(18,0),",
				"          GV_Amount as decimal(18,0),",
				"          Sales_Amount as decimal(18,0),",
				"          Kpoint_Status as integer,",
				"          FZ_Channel as integer,",
				"          Is_Confirm as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestLOYALTYKDP",
				"IngestLOYALTYKDP select(mapColumn(",
				"          id = KDP_ID,",
				"          account_id = KDP_Member_ID,",
				"          points = KDP_Amount,",
				"          point_type_id = KDP_Type,",
				"          effective_date = Start_At,",
				"          expired_date = Expire_At,",
				"          remark = KDP_Remark,",
				"          status = KDP_Status,",
				"          member_tier_id = Tier_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamedColumn",
				"DateAdd8 derive(effective_date_utc = toTimestamp(concat(toString(byName('effective_date'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),' +08:00'), 'yyyy-MM-dd\\'T\\'HH:mm:ss')-hours(8),",
				"          expired_date_utc = toTimestamp(concat(toString(byName('expired_date'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),' +08:00'), 'yyyy-MM-dd\\'T\\'HH:mm:ss')-hours(8),",
				"          effective_date_str = concat(toString(byName('effective_date'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),'+00:00'),",
				"          expired_date_str = concat(toString(byName('expired_date'),'yyyy-MM-dd\\'T\\'HH:mm:ss'),'+00:00'),",
				"          active_flag = 1,",
				"          create_by = 1,",
				"          create_date = fromUTC(currentUTC(), 'China Standard Time'),",
				"          tenant_id = 1,",
				"          action_type_id = 1,",
				"          reference_no = \"\",",
				"          point_biz_code = \"\",",
				"          coefficient = 1) ~> AddColumn",
				"AddColumn filter(isNull(account_id)==false()) ~> FilterAccountID",
				"RenamedColumn derive(effective_date_8 = effective_date+hours(8),",
				"          expired_date_8 = expired_date+hours(8)) ~> DateAdd8",
				"FilterAccountID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          id,",
				"          account_id,",
				"          points,",
				"          point_type_id,",
				"          action_type_id,",
				"          remark,",
				"          status,",
				"          member_tier_id,",
				"          effective_date_utc,",
				"          effective_date_local = effective_date_8,",
				"          effective_date_str,",
				"          expired_date_utc,",
				"          expired_date_local = expired_date_8,",
				"          expired_date_str,",
				"          active_flag,",
				"          create_by,",
				"          create_date,",
				"          tenant_id,",
				"          reference_no,",
				"          point_biz_code,",
				"          coefficient",
				"     )) ~> SinkToTempTableInSynapse"
			]
		}
	}
}