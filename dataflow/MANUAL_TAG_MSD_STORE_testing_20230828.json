{
	"name": "MANUAL_TAG_MSD_STORE_testing_20230828",
	"properties": {
		"folder": {
			"name": "Manual_Tag"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PUB_REF_STORE",
						"type": "DatasetReference"
					},
					"name": "InjestRefStore"
				},
				{
					"dataset": {
						"referenceName": "PUB_REF_TENANT",
						"type": "DatasetReference"
					},
					"name": "IngestRefTenent"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_MANUAL_TAG_MSD_STORE",
						"type": "DatasetReference"
					},
					"name": "SinkToTable"
				}
			],
			"transformations": [
				{
					"name": "JoinRefTenant"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "DropUnwantColumn"
				},
				{
					"name": "DropCountColumn"
				},
				{
					"name": "FilterNotNullID"
				},
				{
					"name": "window2"
				},
				{
					"name": "LatestTenentStatus"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Store_Code as string,",
				"          Store_BU as string,",
				"          SB_code as string,",
				"          SB_name as string,",
				"          Store_Name as string,",
				"          Store_Intro as string,",
				"          Mall_Code as string,",
				"          Store_Status as integer,",
				"          Store_Floor as string,",
				"          Store_Unitcode as string,",
				"          Store_Classify as string,",
				"          SB1_Code as string,",
				"          SB1_Name as string,",
				"          SB2_Code as string,",
				"          SB2_Name as string,",
				"          Store_Cate as string,",
				"          Is_Channel_No as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Store_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> InjestRefStore",
				"source(output(",
				"          Tenantship_ID as string,",
				"          Tenant_ID as integer,",
				"          Source_BU as string,",
				"          Site_ID as integer,",
				"          Site_Code as string,",
				"          Site_Name_EN as string,",
				"          Site_Name_SC as string,",
				"          Site_Name_TC as string,",
				"          Contract_No as string,",
				"          Store_ID as string,",
				"          Store_Floor as integer,",
				"          Store_Cate as string,",
				"          Brand_Name_EN as string,",
				"          Brand_Name_SC as string,",
				"          Brand_Name_TC as string,",
				"          Brand_ID as string,",
				"          LV1_Class_ID as string,",
				"          LV1_Class_Name_EN as string,",
				"          LV1_Class_Name_SC as string,",
				"          LV1_Class_Name_TC as string,",
				"          LV2_Class_ID as string,",
				"          LV2_Class_Name_EN as string,",
				"          LV2_Class_Name_SC as string,",
				"          LV2_Class_Name_TC as string,",
				"          Store_Name_EN as string,",
				"          Store_Name_SC as string,",
				"          Store_Name_TC as string,",
				"          Com_Name_EN as string,",
				"          Com_Name_SC as string,",
				"          Com_Name_TC as string,",
				"          Store_Code as string,",
				"          Lease_Area as integer,",
				"          Contract_Start as date,",
				"          Contract_End as date,",
				"          Open_Time as timestamp,",
				"          Close_Time as timestamp,",
				"          Parent_Tenant_ID as string,",
				"          Store_Code_Value as string,",
				"          Cate_ID as string,",
				"          Cate_Name as string,",
				"          Old_Class_ID as string,",
				"          Old_Class_Name_EN as string,",
				"          Old_Class_Name_SC as string,",
				"          Old_Class_Name_TC as string,",
				"          Store_Classify as string,",
				"          Kpos_Install as integer,",
				"          Tenant_Interest_Tag as string,",
				"          Tenant_Status as string,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestRefTenent",
				"FilterNotNullID, LatestTenentStatus join(InjestRefStore@Store_Code == IngestRefTenent@Store_Code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinRefTenant",
				"JoinRefTenant derive(group_id = 1,",
				"          active_flag = iif(Tenant_Status =='有效',1,0),",
				"          create_by = 1,",
				"          modify_by = 1,",
				"          tenant_id = 1,",
				"          is_fp_display = 1,",
				"          create_date = currentUTC(),",
				"          modify_date = currentUTC()) ~> AddColumn",
				"AddColumn select(mapColumn(",
				"          store_id = InjestRefStore@Store_ID,",
				"          group_id,",
				"          store_code = InjestRefStore@Store_Code,",
				"          store_name = Store_Name,",
				"          open_date = Open_Time,",
				"          close_date = Close_Time,",
				"          active_flag,",
				"          create_by,",
				"          create_date,",
				"          modify_by,",
				"          modify_date,",
				"          tenant_id = AddColumn@tenant_id,",
				"          open_status = Store_Status,",
				"          is_fp_display,",
				"          consume_forms_code = LV1_Class_ID,",
				"          consume_forms_name = LV1_Class_Name_SC,",
				"          site_id = Site_ID,",
				"          site_name = Site_Name_SC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantColumn",
				"DropUnwantColumn select(mapColumn(",
				"          store_id,",
				"          group_id,",
				"          store_code,",
				"          store_name,",
				"          open_date,",
				"          close_date,",
				"          active_flag,",
				"          create_by,",
				"          create_date,",
				"          modify_by,",
				"          modify_date,",
				"          tenant_id,",
				"          open_status,",
				"          is_fp_display,",
				"          consume_forms_code,",
				"          consume_forms_name,",
				"          site_id,",
				"          site_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropCountColumn",
				"InjestRefStore filter(isNull(Store_ID) == false()) ~> FilterNotNullID",
				"IngestRefTenent window(over(Store_Code),",
				"     desc(Contract_Start, false),",
				"     rank = rank()) ~> window2",
				"window2 filter(rank==1) ~> LatestTenentStatus",
				"DropCountColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          id = store_id,",
				"          group_id,",
				"          store_code,",
				"          store_name,",
				"          open_date,",
				"          close_date,",
				"          active_flag,",
				"          create_by,",
				"          create_date,",
				"          modify_by,",
				"          modify_date,",
				"          tenant_id,",
				"          open_status,",
				"          is_fp_display,",
				"          consume_forms_code,",
				"          consume_forms_name,",
				"          site_id,",
				"          site_name",
				"     )) ~> SinkToTable"
			]
		}
	}
}