{
	"name": "PRO_TRAN_GIFT_RECORD",
	"properties": {
		"folder": {
			"name": "Pro"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vw_Latest_com_gift_record",
						"type": "DatasetReference"
					},
					"name": "IngestRawComGiftRecord"
				},
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestCDMCUSTOMERMAPPING"
				},
				{
					"dataset": {
						"referenceName": "PUB_REF_EVENT",
						"type": "DatasetReference"
					},
					"name": "IngestRawComEvent"
				},
				{
					"dataset": {
						"referenceName": "vw_Latest_com_gift",
						"type": "DatasetReference"
					},
					"name": "IngestComGift"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_PRO_TRAN_GIFT_RECORD",
						"type": "DatasetReference"
					},
					"name": "SinkToTRANGIFTRECORD",
					"rejectedDataLinkedService": {
						"referenceName": "1crmTagMgmtRawProd",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "AddColumn"
				},
				{
					"name": "JoinMapping"
				},
				{
					"name": "DropUnwantColumn"
				},
				{
					"name": "JoinRawComEvent"
				},
				{
					"name": "DropColumnFromCmEvent"
				},
				{
					"name": "JoinComGift"
				},
				{
					"name": "DropColumnComGift"
				},
				{
					"name": "FilterLatest"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          id as long,",
				"          account_id as integer,",
				"          member_id as string,",
				"          level_id as integer,",
				"          exchange_no as string,",
				"          type as integer,",
				"          hedging_no as string,",
				"          event_no as string,",
				"          gift_type as integer,",
				"          gift_no as string,",
				"          card_id as string,",
				"          bar_code as string,",
				"          participation_amount as string,",
				"          quantity as integer,",
				"          exchange_time as integer,",
				"          kpoint as integer,",
				"          spoint as integer,",
				"          amount as string,",
				"          operation_time as integer,",
				"          operator as string,",
				"          is_master as integer,",
				"          voucher as string,",
				"          status as integer,",
				"          remark as string,",
				"          from_fz as integer,",
				"          create_at as integer,",
				"          update_at as integer,",
				"          deleted as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestRawComGiftRecord",
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestCDMCUSTOMERMAPPING",
				"source(output(",
				"          Unique_ID as string,",
				"          Account_ID as string,",
				"          Event_No as string,",
				"          Event_Name as string,",
				"          Event_Remark as string,",
				"          Is_Perm as integer,",
				"          Start_At as timestamp,",
				"          End_At as timestamp,",
				"          Event_Status as integer,",
				"          Can_Reused as integer,",
				"          Diff_Event_Reused as integer,",
				"          Diff_Event_Reused_Times as integer,",
				"          Same_Event_Reused as integer,",
				"          Same_Event_Reused_Times as integer,",
				"          Times_Limit_Cycle as integer,",
				"          Times_Limit as integer,",
				"          Participation_Amount_Limit as integer,",
				"          Participation_Amount_Min as integer,",
				"          Participation_Amount_Max as integer,",
				"          Total_Quantity_Limit as integer,",
				"          Create_At as timestamp,",
				"          Update_At as timestamp,",
				"          Is_Deleted as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestRawComEvent",
				"source(output(",
				"          id as long,",
				"          account_id as integer,",
				"          gift_no as string,",
				"          name as string,",
				"          quantity as integer,",
				"          total as integer,",
				"          is_permanent as integer,",
				"          status as integer,",
				"          start_at as integer,",
				"          end_at as integer,",
				"          kpoint as integer,",
				"          spoint as integer,",
				"          amount as string,",
				"          non_member_limit as integer,",
				"          quantity_limit as integer,",
				"          quantity_limit_cycle as integer,",
				"          quantity_limit_json as string,",
				"          pic_url as string,",
				"          description as string,",
				"          remark as string,",
				"          create_at as integer,",
				"          update_at as integer,",
				"          deleted as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestComGift",
				"DropUnwantColumn derive(BU_Source = 'K11 PRC',",
				"          Start_Date = toDate($Start_Date, 'yyyyMMdd'),",
				"          End_Date = toTimestamp(toString(null())),",
				"          Is_Current = 1,",
				"          Create_At = toTimestamp((toInteger(toString(create_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Update_At = toTimestamp((toInteger(toString(update_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Exchange_Time = toTimestamp((toInteger(toString(exchange_time))+28800)*1000l,'yyyy-MM-dd HH:mm:ss')) ~> AddColumn",
				"FilterLatest, IngestCDMCUSTOMERMAPPING join(member_id == K11PRC_Member_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMapping",
				"JoinMapping select(mapColumn(",
				"          id,",
				"          account_id,",
				"          member_id = Hashed_Member_ID,",
				"          level_id,",
				"          exchange_no,",
				"          type,",
				"          hedging_no,",
				"          event_no,",
				"          gift_type,",
				"          gift_no,",
				"          card_id,",
				"          bar_code,",
				"          participation_amount,",
				"          quantity,",
				"          exchange_time,",
				"          kpoint,",
				"          spoint,",
				"          amount,",
				"          operation_time,",
				"          operator,",
				"          is_master,",
				"          voucher,",
				"          status,",
				"          remark,",
				"          from_fz,",
				"          create_at,",
				"          update_at,",
				"          deleted,",
				"          Customer_UID,",
				"          gift_Insert_Date = Insert_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantColumn",
				"AddColumn, IngestRawComEvent join(DropUnwantColumn@event_no == IngestRawComEvent@Event_No,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinRawComEvent",
				"JoinRawComEvent select(mapColumn(",
				"          id,",
				"          account_id = DropUnwantColumn@account_id,",
				"          member_id,",
				"          level_id,",
				"          exchange_no,",
				"          type,",
				"          hedging_no,",
				"          event_no = DropUnwantColumn@event_no,",
				"          gift_type,",
				"          gift_no,",
				"          card_id,",
				"          bar_code,",
				"          participation_amount,",
				"          quantity,",
				"          exchange_time = AddColumn@Exchange_Time,",
				"          kpoint,",
				"          spoint,",
				"          amount,",
				"          operation_time,",
				"          operator,",
				"          is_master,",
				"          voucher,",
				"          status,",
				"          remark,",
				"          from_fz,",
				"          create_at = AddColumn@Create_At,",
				"          update_at = AddColumn@Update_At,",
				"          deleted,",
				"          Customer_UID,",
				"          BU_Source,",
				"          Start_Date = AddColumn@Start_Date,",
				"          End_Date = AddColumn@End_Date,",
				"          Is_Current = AddColumn@Is_Current,",
				"          name = Event_Name,",
				"          gift_Insert_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropColumnFromCmEvent",
				"DropColumnFromCmEvent, IngestComGift join(DropColumnFromCmEvent@gift_no == IngestComGift@gift_no,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinComGift",
				"JoinComGift select(mapColumn(",
				"          id = DropColumnFromCmEvent@id,",
				"          account_id = DropColumnFromCmEvent@account_id,",
				"          member_id,",
				"          level_id,",
				"          exchange_no,",
				"          type,",
				"          hedging_no,",
				"          event_no,",
				"          gift_type,",
				"          gift_no = DropColumnFromCmEvent@gift_no,",
				"          card_id,",
				"          bar_code,",
				"          participation_amount,",
				"          quantity = DropColumnFromCmEvent@quantity,",
				"          exchange_time,",
				"          kpoint = DropColumnFromCmEvent@kpoint,",
				"          spoint = DropColumnFromCmEvent@spoint,",
				"          amount = DropColumnFromCmEvent@amount,",
				"          operation_time,",
				"          operator,",
				"          is_master,",
				"          voucher,",
				"          status = DropColumnFromCmEvent@status,",
				"          remark = DropColumnFromCmEvent@remark,",
				"          from_fz,",
				"          create_at = DropColumnFromCmEvent@create_at,",
				"          update_at = DropColumnFromCmEvent@update_at,",
				"          deleted = DropColumnFromCmEvent@deleted,",
				"          Customer_UID,",
				"          BU_Source,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current,",
				"          gift_Insert_Date,",
				"          ref_Insert_Date = Insert_Date,",
				"          Event_Name = DropColumnFromCmEvent@name,",
				"          Gift_Name = IngestComGift@name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropColumnComGift",
				"IngestRawComGiftRecord filter(toDate(Insert_Date)>=addDays(toDate(currentUTC()+hours(8)),0)) ~> FilterLatest",
				"DropColumnComGift sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Gift_ID = id,",
				"          Customer_UID,",
				"          Account_ID = account_id,",
				"          Customer_ID = member_id,",
				"          BU_Source,",
				"          Tier_ID = level_id,",
				"          Exchange_No = exchange_no,",
				"          Gift_Cate = type,",
				"          Event_Code = event_no,",
				"          Event_Name,",
				"          Gift_Type = gift_type,",
				"          Gift_Code = gift_no,",
				"          Gift_Name,",
				"          Coupon_ID = card_id,",
				"          Parti_Amount = participation_amount,",
				"          Gift_Quan = quantity,",
				"          Exchange_Time = exchange_time,",
				"          Gift_Amount = amount,",
				"          Is_Master = is_master,",
				"          Gift_Status = status,",
				"          Gift_Remark = remark,",
				"          From_Fz = from_fz,",
				"          Create_At = create_at,",
				"          Update_At = update_at,",
				"          Is_Deleted = deleted,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current",
				"     )) ~> SinkToTRANGIFTRECORD"
			]
		}
	}
}