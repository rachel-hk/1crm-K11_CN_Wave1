{
	"name": "SFMC_REF_TENANT",
	"properties": {
		"folder": {
			"name": "SFMC"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PUB_REF_TENANT",
						"type": "DatasetReference"
					},
					"name": "REFTENANT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TEMP_SFMC_REF_Tenant",
						"type": "DatasetReference"
					},
					"name": "SinkToDataLake"
				},
				{
					"dataset": {
						"referenceName": "SFMC_RECORD_COUNT",
						"type": "DatasetReference"
					},
					"name": "SinkToRecordCount"
				}
			],
			"transformations": [
				{
					"name": "RecordCount"
				},
				{
					"name": "AddColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Tenantship_ID as string,",
				"          Tenant_ID as string,",
				"          Source_BU as string,",
				"          Site_ID as string,",
				"          Site_Code as string,",
				"          Site_Name_EN as string,",
				"          Site_Name_SC as string,",
				"          Site_Name_TC as string,",
				"          Contract_No as string,",
				"          Store_ID as string,",
				"          Store_Floor as string,",
				"          Store_Cate as string,",
				"          Brand_Name_EN as string,",
				"          Brand_Name_SC as string,",
				"          Brand_Name_TC as string,",
				"          Brand_ID as string,",
				"          LV1_Class_ID as string,",
				"          LV1_Class_Name_EN as string,",
				"          LV1_Class_Name_SC as string,",
				"          LV1_Class_Name_TC as string,",
				"          LV2_Class_ID as string,",
				"          LV2_Class_Name_EN as string,",
				"          LV2_Class_Name_SC as string,",
				"          LV2_Class_Name_TC as string,",
				"          Store_Name_EN as string,",
				"          Store_Name_SC as string,",
				"          Store_Name_TC as string,",
				"          Com_Name_EN as string,",
				"          Com_Name_SC as string,",
				"          Com_Name_TC as string,",
				"          Store_Code as string,",
				"          Lease_Area as decimal(10,4),",
				"          Contract_Start as date,",
				"          Contract_End as date,",
				"          Open_Time as timestamp,",
				"          Close_Time as timestamp,",
				"          Parent_Tenant_ID as string,",
				"          Store_Code_Value as string,",
				"          Cate_ID as string,",
				"          Cate_Name as string,",
				"          Old_Class_ID as string,",
				"          Old_Class_Name_EN as string,",
				"          Old_Class_Name_SC as string,",
				"          Old_Class_Name_TC as string,",
				"          Store_Classify as string,",
				"          Kpos_Install as string,",
				"          Tenant_Interest_Tag as string,",
				"          Tenant_Status as string,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> REFTENANT",
				"REFTENANT aggregate(groupBy({1} = 1),",
				"     Record_Count = count(1)) ~> RecordCount",
				"RecordCount derive(Name = 'Azure_Ref_Tenant',",
				"          Insert_Date = currentUTC()+hours(8)) ~> AddColumns",
				"REFTENANT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Tenantship_ID as string,",
				"          Tenant_ID as string,",
				"          Source_BU as string,",
				"          Site_ID as string,",
				"          Site_Code as string,",
				"          Site_Name_EN as string,",
				"          Site_Name_SC as string,",
				"          Site_Name_TC as string,",
				"          Contract_No as string,",
				"          Store_ID as string,",
				"          Store_Floor as string,",
				"          Store_Cate as string,",
				"          Brand_Name_EN as string,",
				"          Brand_Name_SC as string,",
				"          Brand_Name_TC as string,",
				"          Brand_ID as string,",
				"          LV1_Class_ID as string,",
				"          LV1_Class_Name_EN as string,",
				"          LV1_Class_Name_SC as string,",
				"          LV1_Class_Name_TC as string,",
				"          LV2_Class_ID as string,",
				"          LV2_Class_Name_EN as string,",
				"          LV2_Class_Name_SC as string,",
				"          LV2_Class_Name_TC as string,",
				"          Store_Name_EN as string,",
				"          Store_Name_SC as string,",
				"          Store_Name_TC as string,",
				"          Com_Name_EN as string,",
				"          Com_Name_SC as string,",
				"          Com_Name_TC as string,",
				"          Store_Code as string,",
				"          Lease_Area as string,",
				"          Contract_Start as string,",
				"          Contract_End as string,",
				"          Open_Time as string,",
				"          Close_Time as string,",
				"          Parent_Tenant_ID as string,",
				"          Store_Code_Value as string,",
				"          Cate_ID as string,",
				"          Cate_Name as string,",
				"          Old_Class_ID as string,",
				"          Old_Class_Name_EN as string,",
				"          Old_Class_Name_SC as string,",
				"          Old_Class_Name_TC as string,",
				"          Store_Classify as string,",
				"          Kpos_Install as string,",
				"          Tenant_Interest_Tag as string,",
				"          Tenant_Status as string,",
				"          Start_Date as string,",
				"          End_Date as string,",
				"          {Is_Current,,,,} as string",
				"     ),",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: []) ~> SinkToDataLake",
				"AddColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Record_Count as integer,",
				"          Insert_Date as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkToRecordCount"
			]
		}
	}
}