{
	"name": "PRO_LOYALTY_KDP",
	"properties": {
		"folder": {
			"name": "Pro"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vw_Latest_com_member_kdp_use_record",
						"type": "DatasetReference"
					},
					"name": "IngestRawComMemberKDPRecord"
				},
				{
					"dataset": {
						"referenceName": "vw_Latest_com_member_kp_record",
						"type": "DatasetReference"
					},
					"name": "IngestRawComMemberKPRecord"
				},
				{
					"dataset": {
						"referenceName": "PUB_CDM_CUSTOMER_MAPPING",
						"type": "DatasetReference"
					},
					"name": "IngestCustomerMapping"
				},
				{
					"dataset": {
						"referenceName": "PUB_REF_CUSTOMER_LEVEL",
						"type": "DatasetReference"
					},
					"name": "IngestREFCUSTOMERLEVEL"
				},
				{
					"dataset": {
						"referenceName": "vw_Latest_com_kdp_bonus_history",
						"type": "DatasetReference"
					},
					"name": "IngestKDPBonusHistory"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Par_PRO_LOTALTY_KDP",
						"type": "DatasetReference"
					},
					"name": "SinktoProcessTable"
				}
			],
			"transformations": [
				{
					"name": "JoinKDPAndKP"
				},
				{
					"name": "DropUnwantedColumn"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "JoinCustomerMapping"
				},
				{
					"name": "JoinREFCUSTOMERLEVEL"
				},
				{
					"name": "RenameColumn"
				},
				{
					"name": "DropUnwantColumnFromRef"
				},
				{
					"name": "FilterLatestKDP"
				},
				{
					"name": "FilterLatestKP"
				},
				{
					"name": "UsedKDP"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          id as integer,",
				"          partner_code as string,",
				"          member_id as string,",
				"          kdp_member_id as string,",
				"          partner_serial_number as string,",
				"          kdp_serial_number as string,",
				"          cancel_kdp_serial_number as string,",
				"          kp_unique_id as string,",
				"          frozen_code as string,",
				"          order_code as string,",
				"          kp as long,",
				"          kdp as integer,",
				"          cash as string,",
				"          qrcode as string,",
				"          type as integer,",
				"          remark as string,",
				"          api_key as string,",
				"          status as integer,",
				"          try_count as integer,",
				"          scan_at as long,",
				"          start_at as long,",
				"          expire_at as long,",
				"          cancel_at as long,",
				"          is_return as integer,",
				"          partner_campaign_code as string,",
				"          partner_campaign_type as string,",
				"          create_at as long,",
				"          update_at as long,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestRawComMemberKDPRecord",
				"source(output(",
				"          id as long,",
				"          vip_code as string,",
				"          member_id as string,",
				"          account_id as integer,",
				"          open_id as string,",
				"          record_no as string,",
				"          origin_record_no as string,",
				"          createtime as long,",
				"          bonus_type as string,",
				"          bonus_description as string,",
				"          bonus_point as integer,",
				"          sales_amount as string,",
				"          sales_amount_real as string,",
				"          doc_no as string,",
				"          store_code as string,",
				"          store_name_sc as string,",
				"          store_name_tc as string,",
				"          store_name_en as string,",
				"          sb_code as string,",
				"          area_id as integer,",
				"          ship_id as integer,",
				"          event_id as integer,",
				"          deleted as integer,",
				"          unique_id as string,",
				"          level_id as string,",
				"          special_level_id as integer,",
				"          special_level_time as integer,",
				"          payment_type_id as string,",
				"          time_of_day as long,",
				"          time_of_month as long,",
				"          create_at as long,",
				"          update_at as long,",
				"          mall_id as string,",
				"          returned as integer,",
				"          returned_origin_no as string,",
				"          api_key as string,",
				"          kp_channel as integer,",
				"          kp_type as integer,",
				"          discount_amount as string,",
				"          gvamount as string,",
				"          kp_status as integer,",
				"          fz_channel as integer,",
				"          is_confirm as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestRawComMemberKPRecord",
				"source(output(",
				"          Customer_UID as string,",
				"          K11PRC_Member_ID as string,",
				"          Union_ID as string,",
				"          KDP_ID as string,",
				"          CL_ID as string,",
				"          KGO_ID as string,",
				"          New_KGO_ID as string,",
				"          manual_tag_id as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Hashed_Member_ID as string,",
				"          Hashed_VIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestCustomerMapping",
				"source(output(",
				"          Tier_Code as string,",
				"          System_ID as integer,",
				"          Source_BU as string,",
				"          Account_ID as integer,",
				"          App_ID as string,",
				"          Card_ID as string,",
				"          Card_BD as string,",
				"          Name_Fenze as string,",
				"          Tier_Name as string,",
				"          Valid_Type as integer,",
				"          Start_At as integer,",
				"          Expire_At as integer,",
				"          Upgrade_Rule as integer,",
				"          Upgrade_Model as integer,",
				"          Kpoint_Rate as decimal(18,0),",
				"          Spoint_Rate as decimal(18,0),",
				"          Tier_Discount as integer,",
				"          Is_Sync as integer,",
				"          Create_At as integer,",
				"          Update_At as integer,",
				"          Is_Deleted as integer,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestREFCUSTOMERLEVEL",
				"source(output(",
				"          id as long,",
				"          kdp_point_id as string,",
				"          burn_kdp_serial_number as string,",
				"          kdp_member_number as string,",
				"          burn_partner_code as string,",
				"          burn_partner_serial_number as string,",
				"          point_source_type as string,",
				"          earn_partner_code as string,",
				"          earn_partner_serial_number as string,",
				"          burn_point_delta as integer,",
				"          burn_transaction_at as string,",
				"          burn_created_at as string,",
				"          create_at as integer,",
				"          update_at as integer,",
				"          File_Path as string,",
				"          Insert_Date as string,",
				"          SEQUENCE as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> IngestKDPBonusHistory",
				"RenameColumn, FilterLatestKP join(RenameColumn@member_id == IngestRawComMemberKPRecord@member_id",
				"     && kp_unique_id == unique_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinKDPAndKP",
				"JoinKDPAndKP select(mapColumn(",
				"          partner_code,",
				"          KDP_ID,",
				"          member_id = RenameColumn@member_id,",
				"          kdp_member_id,",
				"          partner_serial_number,",
				"          kdp_serial_number,",
				"          cancel_kdp_serial_number,",
				"          kp_unique_id,",
				"          frozen_code,",
				"          order_code,",
				"          kp,",
				"          kdp,",
				"          cash,",
				"          qrcode,",
				"          type,",
				"          remark,",
				"          api_key = RenameColumn@api_key,",
				"          status,",
				"          try_count,",
				"          scan_at,",
				"          start_at,",
				"          expire_at,",
				"          cancel_at,",
				"          is_return,",
				"          partner_campaign_code,",
				"          partner_campaign_type,",
				"          create_at = RenameColumn@create_at,",
				"          update_at = RenameColumn@update_at,",
				"          id,",
				"          vip_code,",
				"          account_id,",
				"          open_id,",
				"          record_no,",
				"          origin_record_no,",
				"          createtime,",
				"          bonus_type,",
				"          bonus_description,",
				"          bonus_point,",
				"          sales_amount,",
				"          sales_amount_real,",
				"          doc_no,",
				"          store_code,",
				"          store_name_sc,",
				"          store_name_tc,",
				"          store_name_en,",
				"          sb_code,",
				"          area_id,",
				"          ship_id,",
				"          event_id,",
				"          deleted,",
				"          unique_id,",
				"          level_id,",
				"          special_level_id,",
				"          special_level_time,",
				"          payment_type_id,",
				"          time_of_day,",
				"          time_of_month,",
				"          mall_id,",
				"          returned,",
				"          returned_origin_no,",
				"          kp_channel,",
				"          kp_type,",
				"          discount_amount,",
				"          gvamount,",
				"          kp_status,",
				"          fz_channel,",
				"          is_confirm,",
				"          sales_amount,",
				"          bonus_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantedColumn",
				"DropUnwantedColumn derive(BU_Source = 'K11 PRC',",
				"          Start_Date = toDate($Start_Date, 'yyyyMMdd'),",
				"          End_Date = toDate(toString(null())),",
				"          Is_Current = 1,",
				"          Start_At = toTimestamp((toInteger(toString(start_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Scan_At = toTimestamp((toInteger(toString(scan_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Expire_At = toTimestamp((toInteger(toString(expire_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Cancel_At = toTimestamp((toInteger(toString(cancel_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Create_At = toTimestamp((toInteger(toString(create_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss'),",
				"          Update_At = toTimestamp((toInteger(toString(update_at))+28800)*1000l,'yyyy-MM-dd HH:mm:ss')) ~> AddColumn",
				"JoinREFCUSTOMERLEVEL, IngestCustomerMapping join(member_id == K11PRC_Member_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCustomerMapping",
				"AddColumn, IngestREFCUSTOMERLEVEL join(level_id == Tier_Code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinREFCUSTOMERLEVEL",
				"FilterLatestKDP select(mapColumn(",
				"          KDP_ID = id,",
				"          partner_code,",
				"          member_id,",
				"          kdp_member_id,",
				"          partner_serial_number,",
				"          kdp_serial_number,",
				"          cancel_kdp_serial_number,",
				"          kp_unique_id,",
				"          frozen_code,",
				"          order_code,",
				"          kp,",
				"          kdp,",
				"          cash,",
				"          qrcode,",
				"          type,",
				"          remark,",
				"          api_key,",
				"          status,",
				"          try_count,",
				"          scan_at,",
				"          start_at,",
				"          expire_at,",
				"          cancel_at,",
				"          is_return,",
				"          partner_campaign_code,",
				"          partner_campaign_type,",
				"          create_at,",
				"          update_at,",
				"          kdp_Insert_Date = Insert_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumn",
				"JoinCustomerMapping select(mapColumn(",
				"          partner_code,",
				"          KDP_ID = DropUnwantedColumn@KDP_ID,",
				"          kdp_member_id,",
				"          partner_serial_number,",
				"          kdp_serial_number,",
				"          cancel_kdp_serial_number,",
				"          kp_unique_id,",
				"          frozen_code,",
				"          order_code,",
				"          kp,",
				"          kdp,",
				"          cash,",
				"          qrcode,",
				"          type,",
				"          remark,",
				"          status,",
				"          try_count,",
				"          scan_at = DropUnwantedColumn@scan_at,",
				"          start_at = DropUnwantedColumn@start_at,",
				"          expire_at = DropUnwantedColumn@expire_at,",
				"          cancel_at = DropUnwantedColumn@cancel_at,",
				"          is_return,",
				"          partner_campaign_code,",
				"          partner_campaign_type,",
				"          id,",
				"          vip_code,",
				"          member_id = Hashed_Member_ID,",
				"          account_id = DropUnwantedColumn@account_id,",
				"          open_id,",
				"          record_no,",
				"          origin_record_no,",
				"          createtime,",
				"          bonus_type,",
				"          bonus_description,",
				"          bonus_point,",
				"          sales_amount,",
				"          sales_amount_real,",
				"          doc_no,",
				"          store_code,",
				"          store_name_sc,",
				"          store_name_tc,",
				"          store_name_en,",
				"          sb_code,",
				"          area_id,",
				"          ship_id,",
				"          event_id,",
				"          deleted,",
				"          unique_id,",
				"          level_id,",
				"          special_level_id,",
				"          special_level_time,",
				"          payment_type_id,",
				"          time_of_day,",
				"          time_of_month,",
				"          create_at = DropUnwantedColumn@create_at,",
				"          update_at = DropUnwantedColumn@update_at,",
				"          mall_id,",
				"          returned,",
				"          returned_origin_no,",
				"          api_key,",
				"          kp_channel,",
				"          kp_type,",
				"          discount_amount,",
				"          gvamount,",
				"          kp_status,",
				"          fz_channel,",
				"          is_confirm,",
				"          BU_Source,",
				"          Start_Date = AddColumn@Start_Date,",
				"          End_Date = AddColumn@End_Date,",
				"          Is_Current = AddColumn@Is_Current,",
				"          Start_At = AddColumn@Start_At,",
				"          Scan_At = AddColumn@Scan_At,",
				"          Expire_At = AddColumn@Expire_At,",
				"          Cancel_At = AddColumn@Cancel_At,",
				"          Create_At = AddColumn@Create_At,",
				"          Update_At = AddColumn@Update_At,",
				"          Tier_Name,",
				"          Customer_UID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantColumnFromRef",
				"IngestRawComMemberKDPRecord filter(toDate(Insert_Date)>=addDays(toDate(currentUTC()+hours(8)),0)) ~> FilterLatestKDP",
				"IngestRawComMemberKPRecord filter(toDate(Insert_Date)>=addDays(toDate(currentUTC()+hours(8)),0)&&unique_id!='') ~> FilterLatestKP",
				"IngestKDPBonusHistory aggregate(groupBy(earn_partner_serial_number),",
				"     Used_KDP = sum(burn_point_delta)) ~> UsedKDP",
				"DropUnwantColumnFromRef sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          KDP_ID,",
				"          Customer_UID,",
				"          Partner_Code = partner_code,",
				"          Member_ID = member_id,",
				"          BU_Source,",
				"          KDP_Member_ID = kdp_member_id,",
				"          Partner_SN = partner_serial_number,",
				"          KP_Order_Code = record_no,",
				"          KDP_SN = kdp_serial_number,",
				"          Cancel_KDP_SN = cancel_kdp_serial_number,",
				"          KP_UID = kp_unique_id,",
				"          Frozen_Code = frozen_code,",
				"          Order_Code = order_code,",
				"          Used_Kpoint = kp,",
				"          KDP_Amount = kdp,",
				"          Bonus_Point = bonus_point,",
				"          Redeem_Cash = cash,",
				"          KDP_Type = type,",
				"          KDP_Remark = remark,",
				"          KDP_Status = status,",
				"          Try_Count = try_count,",
				"          Scan_At = DropUnwantColumnFromRef@Scan_At,",
				"          Start_At = DropUnwantColumnFromRef@Start_At,",
				"          Expire_At = DropUnwantColumnFromRef@Expire_At,",
				"          Cancel_At = DropUnwantColumnFromRef@Cancel_At,",
				"          Partner_Campaign_Code = partner_campaign_code,",
				"          Partner_Campaign_Type = partner_campaign_type,",
				"          Create_At = DropUnwantColumnFromRef@Create_At,",
				"          Update_At = DropUnwantColumnFromRef@Update_At,",
				"          Event_ID = event_id,",
				"          Tier_ID = level_id,",
				"          Tier_Name,",
				"          Special_Tier_ID = special_level_id,",
				"          Pay_Type_ID = payment_type_id,",
				"          Mall_ID = mall_id,",
				"          Is_Returned = returned,",
				"          Return_Origin_No = returned_origin_no,",
				"          Kpoint_Channel = kp_channel,",
				"          Kpoint_Type = kp_type,",
				"          Discount_Amount = discount_amount,",
				"          GV_Amount = gvamount,",
				"          Sales_Amount = sales_amount,",
				"          Kpoint_Status = kp_status,",
				"          FZ_Channel = fz_channel,",
				"          Is_Confirm = is_confirm,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current,",
				"          bonus_type",
				"     )) ~> SinktoProcessTable"
			]
		}
	}
}