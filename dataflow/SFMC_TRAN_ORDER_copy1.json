{
	"name": "SFMC_TRAN_ORDER_copy1",
	"properties": {
		"folder": {
			"name": "SFMC"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PUB_TRAN_ORDER",
						"type": "DatasetReference"
					},
					"name": "TRANORDER"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TEMP_TRAN_ORDER",
						"type": "DatasetReference"
					},
					"name": "SinkToDataLake"
				},
				{
					"dataset": {
						"referenceName": "SFMC_RECORD_COUNT",
						"type": "DatasetReference"
					},
					"name": "SinkToRecordCount"
				}
			],
			"transformations": [
				{
					"name": "FilterUID"
				},
				{
					"name": "RecordCount"
				},
				{
					"name": "AddColumns"
				},
				{
					"name": "DateTime"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_Date as string",
				"}",
				"source(output(",
				"          Order_SID as integer,",
				"          Order_Code as string,",
				"          Customer_UID as string,",
				"          Member_ID as string,",
				"          BU_Source as string,",
				"          Union_ID as string,",
				"          Tier_ID as integer,",
				"          Special_Tier_ID as integer,",
				"          Provider_Key as string,",
				"          Trans_Channel as integer,",
				"          Special_Level_Time as timestamp,",
				"          Order_Channel as string,",
				"          Area_ID as integer,",
				"          Origin_Order_Code as string,",
				"          Origin_Parent_Order_Code as string,",
				"          Wechat_Pay_Code as string,",
				"          Store_Code as string,",
				"          Store_Name as string,",
				"          Origin_Amount as decimal(30,4),",
				"          Not_Discount_Amount as decimal(30,4),",
				"          Sales_Amount as decimal(30,4),",
				"          Real_Amount as decimal(30,4),",
				"          Kpoint_Amount as decimal(30,4),",
				"          GV_Amount as decimal(30,4),",
				"          Bonus_Point as integer,",
				"          Bonus_Type as string,",
				"          Order_At as timestamp,",
				"          Order_Source as integer,",
				"          Order_Status as integer,",
				"          Cancel_At as timestamp,",
				"          Order_Remark as string,",
				"          Return_Amount as decimal(30,4),",
				"          Return_Bonus_Point as integer,",
				"          Central_Store_Code as string,",
				"          Online_Type as string,",
				"          KPos_Input as integer,",
				"          Order_Prom_Discount as decimal(30,4),",
				"          Order_Delivery_Fee as decimal(30,4),",
				"          Pay_Type as string,",
				"          Used_Kpoint as integer,",
				"          Prom_ID as integer,",
				"          Prom_Name as string,",
				"          Start_Date as timestamp,",
				"          End_Date as timestamp,",
				"          Is_Current as string,",
				"          Create_At as timestamp,",
				"          Update_At as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: false) ~> TRANORDER",
				"TRANORDER filter(Customer_UID == 'K11PRCad6b90657f5659b419dc815e0535731f' ||",
				"Customer_UID == 'K11PRCd4c4059fba5f5b7f2305f4820808aedd' ||",
				"Customer_UID == 'K11PRCc2fc9dbdc5e313dedf4ff0dedb1c7e7f' ||",
				"Customer_UID == 'K11PRC3800a707dcabae61243891064692c0a0' ||",
				"Customer_UID == 'K11PRC3f6914f93ed66d31df0228621988aaf8' ||",
				"Customer_UID == 'K11PRC2aba127721d116e74b798a456bc4257b' ||",
				"Customer_UID == 'K11PRC4af682431d0cf15f36b58c6408065d7c' ||",
				"Customer_UID == 'K11PRC5d387abdd609cb34b8fca8456ace9013' ||",
				"Customer_UID == 'K11PRC7937fade358df925faae23b0c44e582a' ||",
				"Customer_UID == 'K11PRCa1278dcb429ba81922d882fdcb2c3891') ~> FilterUID",
				"FilterUID aggregate(groupBy({1} = 1),",
				"     Record_Count = count(1)) ~> RecordCount",
				"RecordCount derive(Name = 'TEMP_TRAN_ORDER',",
				"          Insert_Date = currentUTC()) ~> AddColumns",
				"TRANORDER derive(Special_Level_Time = Special_Level_Time+hours(8)) ~> DateTime",
				"FilterUID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Order_SID,",
				"          Order_Code,",
				"          Customer_UID,",
				"          Member_ID,",
				"          BU_Source,",
				"          Union_ID,",
				"          Tier_ID,",
				"          Special_Tier_ID,",
				"          Provider_Key,",
				"          Trans_Channel,",
				"          Special_Level_Time,",
				"          Order_Channel,",
				"          Area_ID,",
				"          Origin_Order_Code,",
				"          Origin_Parent_Order_Code,",
				"          Wechat_Pay_Code,",
				"          Store_Code,",
				"          Store_Name,",
				"          Origin_Amount,",
				"          Not_Discount_Amount,",
				"          Sales_Amount,",
				"          Real_Amount,",
				"          Kpoint_Amount,",
				"          GV_Amount,",
				"          Bonus_Point,",
				"          Bonus_Type,",
				"          Order_At,",
				"          Order_Source,",
				"          Order_Status,",
				"          Cancel_At,",
				"          Order_Remark,",
				"          Return_Amount,",
				"          Return_Bonus_Point,",
				"          Central_Store_Code,",
				"          Online_Type,",
				"          KPos_Input,",
				"          Order_Prom_Discount,",
				"          Order_Delivery_Fee,",
				"          Pay_Type,",
				"          Used_Kpoint,",
				"          Prom_ID,",
				"          Prom_Name,",
				"          Start_Date,",
				"          End_Date,",
				"          Is_Current,",
				"          Create_At,",
				"          Update_At",
				"     )) ~> SinkToDataLake",
				"AddColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Record_Count as integer,",
				"          Insert_Date as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkToRecordCount"
			]
		}
	}
}